
HMI_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  000030f0  00003184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000ea  008000ea  0000320e  2**0
                  ALLOC
  3 .stab         00002c88  00000000  00000000  00003210  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012f6  00000000  00000000  00005e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000718e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000072ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000743e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009087  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ad20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__vector_3>
      10:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__vector_8>
      24:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 30       	cpi	r26, 0x04	; 4
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 09 	call	0x137c	; 0x137c <main>
      8a:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ed       	ldi	r26, 0xD2	; 210
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 18 	jmp	0x302c	; 0x302c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 18 	jmp	0x300c	; 0x300c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 18 	jmp	0x300c	; 0x300c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 ed       	ldi	r24, 0xD2	; 210
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 18 	jmp	0x302c	; 0x302c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 18 	jmp	0x300c	; 0x300c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 06 18 	jmp	0x300c	; 0x300c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 06 18 	jmp	0x300c	; 0x300c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer_function>:
uint8 flag = 0;     /*flag to constantly ask user to create password until match occurs*/
uint8 g_timer_flag = 1;     /*flag to stop everything until timer finishes*/
uint8 g_mismatch_flag = 0;    /*flag to indicate whether password entered at first is right or wrong*/
uint16 g_tick2 = 0;        /*counter for the second callback function of the timer*/

void timer_function(void){     /*the first callback function for the timer*/
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;  /*increment counter each interrupt*/
     b4e:	80 91 f5 00 	lds	r24, 0x00F5
     b52:	90 91 f6 00 	lds	r25, 0x00F6
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 f6 00 	sts	0x00F6, r25
     b5c:	80 93 f5 00 	sts	0x00F5, r24
	 * at the next 3 seconds (from int. no. 468 to int. no. 562) print that door is open
	 * at the next 15 seconds (from int. no. 562 to int. no. 1031) print that door is closing
	 * at the end (when we reach int. no. 1031) clear screen and de-initialize the timer and clear flags
	 */

	if(g_tick == 1){
     b60:	80 91 f5 00 	lds	r24, 0x00F5
     b64:	90 91 f6 00 	lds	r25, 0x00F6
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	29 f4       	brne	.+10     	; 0xb78 <timer_function+0x32>
		LCD_displayString("Door is opening");
     b6e:	80 e6       	ldi	r24, 0x60	; 96
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
     b76:	32 c0       	rjmp	.+100    	; 0xbdc <timer_function+0x96>
	}
	else if(g_tick == 468){
     b78:	80 91 f5 00 	lds	r24, 0x00F5
     b7c:	90 91 f6 00 	lds	r25, 0x00F6
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	84 3d       	cpi	r24, 0xD4	; 212
     b84:	92 07       	cpc	r25, r18
     b86:	39 f4       	brne	.+14     	; 0xb96 <timer_function+0x50>
		LCD_clearScreen();
     b88:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_clearScreen>
		LCD_displayString("door is open");
     b8c:	80 e7       	ldi	r24, 0x70	; 112
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
     b94:	23 c0       	rjmp	.+70     	; 0xbdc <timer_function+0x96>
	}
	else if(g_tick == 562){
     b96:	80 91 f5 00 	lds	r24, 0x00F5
     b9a:	90 91 f6 00 	lds	r25, 0x00F6
     b9e:	22 e0       	ldi	r18, 0x02	; 2
     ba0:	82 33       	cpi	r24, 0x32	; 50
     ba2:	92 07       	cpc	r25, r18
     ba4:	39 f4       	brne	.+14     	; 0xbb4 <timer_function+0x6e>
		LCD_clearScreen();
     ba6:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_clearScreen>
		LCD_displayString("Door is closing");
     baa:	8d e7       	ldi	r24, 0x7D	; 125
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
     bb2:	14 c0       	rjmp	.+40     	; 0xbdc <timer_function+0x96>
	}
	else if(g_tick == 1031){
     bb4:	80 91 f5 00 	lds	r24, 0x00F5
     bb8:	90 91 f6 00 	lds	r25, 0x00F6
     bbc:	24 e0       	ldi	r18, 0x04	; 4
     bbe:	87 30       	cpi	r24, 0x07	; 7
     bc0:	92 07       	cpc	r25, r18
     bc2:	61 f4       	brne	.+24     	; 0xbdc <timer_function+0x96>
		LCD_clearScreen();
     bc4:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_clearScreen>
		g_tick = 0;
     bc8:	10 92 f6 00 	sts	0x00F6, r1
     bcc:	10 92 f5 00 	sts	0x00F5, r1
		g_timer_flag = 0;
     bd0:	10 92 da 00 	sts	0x00DA, r1
		Timer_DeInit(0);
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <Timer_DeInit>
	}
}
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <timer_function2>:
void timer_function2(void){           /*the second callback function for the timer*/
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62

	g_tick2++;      /*increment counter each interrupt*/
     bea:	80 91 fa 00 	lds	r24, 0x00FA
     bee:	90 91 fb 00 	lds	r25, 0x00FB
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	90 93 fb 00 	sts	0x00FB, r25
     bf8:	80 93 fa 00 	sts	0x00FA, r24

	/*
	 * at the first minute (from first interrupt to int. no. 1875) print wrong!!!
	 * at the end of the minute (at int. no. 1875) clear screen and de-initialize the timer and clear flags
	 */
	if(g_tick2 == 1){
     bfc:	80 91 fa 00 	lds	r24, 0x00FA
     c00:	90 91 fb 00 	lds	r25, 0x00FB
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	91 05       	cpc	r25, r1
     c08:	29 f4       	brne	.+10     	; 0xc14 <timer_function2+0x32>
		LCD_displayString("wrong!!!");
     c0a:	8d e8       	ldi	r24, 0x8D	; 141
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
     c12:	14 c0       	rjmp	.+40     	; 0xc3c <timer_function2+0x5a>
	}
	else if(g_tick2 == 1875){
     c14:	80 91 fa 00 	lds	r24, 0x00FA
     c18:	90 91 fb 00 	lds	r25, 0x00FB
     c1c:	27 e0       	ldi	r18, 0x07	; 7
     c1e:	83 35       	cpi	r24, 0x53	; 83
     c20:	92 07       	cpc	r25, r18
     c22:	61 f4       	brne	.+24     	; 0xc3c <timer_function2+0x5a>
		LCD_clearScreen();
     c24:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_clearScreen>
		g_tick2 = 0;
     c28:	10 92 fb 00 	sts	0x00FB, r1
     c2c:	10 92 fa 00 	sts	0x00FA, r1
		g_timer_flag = 0;
     c30:	10 92 da 00 	sts	0x00DA, r1
		Timer_DeInit(0);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <Timer_DeInit>
	}
}
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <setting_password>:
void setting_password(void){           /*function to set new password*/
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	e8 97       	sbiw	r28, 0x38	; 56
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
	/*set cursor position and print and set cursor to new line*/
	LCD_moveCursor(0, 0);
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>
	LCD_displayString("Enter Password");
     c62:	86 e9       	ldi	r24, 0x96	; 150
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
	LCD_moveCursor(1, 0);
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>

	/* get the key and send it by UART */
	for(i=0;i<5;i++){
     c72:	10 92 f4 00 	sts	0x00F4, r1
     c76:	8e c0       	rjmp	.+284    	; 0xd94 <setting_password+0x152>
		pass[i] = KEYPAD_getPressedKey();
     c78:	80 91 f4 00 	lds	r24, 0x00F4
     c7c:	08 2f       	mov	r16, r24
     c7e:	10 e0       	ldi	r17, 0x00	; 0
     c80:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <KEYPAD_getPressedKey>
     c84:	f8 01       	movw	r30, r16
     c86:	e6 51       	subi	r30, 0x16	; 22
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	80 83       	st	Z, r24
		UART_sendByte(pass[i]);
     c8c:	80 91 f4 00 	lds	r24, 0x00F4
     c90:	88 2f       	mov	r24, r24
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	fc 01       	movw	r30, r24
     c96:	e6 51       	subi	r30, 0x16	; 22
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	80 81       	ld	r24, Z
     c9c:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_sendByte>
		LCD_displayCharacter('*');
     ca0:	8a e2       	ldi	r24, 0x2A	; 42
     ca2:	0e 94 40 11 	call	0x2280	; 0x2280 <LCD_displayCharacter>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	aa ef       	ldi	r26, 0xFA	; 250
     cac:	b3 e4       	ldi	r27, 0x43	; 67
     cae:	8d ab       	std	Y+53, r24	; 0x35
     cb0:	9e ab       	std	Y+54, r25	; 0x36
     cb2:	af ab       	std	Y+55, r26	; 0x37
     cb4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb6:	6d a9       	ldd	r22, Y+53	; 0x35
     cb8:	7e a9       	ldd	r23, Y+54	; 0x36
     cba:	8f a9       	ldd	r24, Y+55	; 0x37
     cbc:	98 ad       	ldd	r25, Y+56	; 0x38
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	4a ef       	ldi	r20, 0xFA	; 250
     cc4:	54 e4       	ldi	r21, 0x44	; 68
     cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	89 ab       	std	Y+49, r24	; 0x31
     cd0:	9a ab       	std	Y+50, r25	; 0x32
     cd2:	ab ab       	std	Y+51, r26	; 0x33
     cd4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cd6:	69 a9       	ldd	r22, Y+49	; 0x31
     cd8:	7a a9       	ldd	r23, Y+50	; 0x32
     cda:	8b a9       	ldd	r24, Y+51	; 0x33
     cdc:	9c a9       	ldd	r25, Y+52	; 0x34
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e8       	ldi	r20, 0x80	; 128
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cea:	88 23       	and	r24, r24
     cec:	2c f4       	brge	.+10     	; 0xcf8 <setting_password+0xb6>
		__ticks = 1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	98 ab       	std	Y+48, r25	; 0x30
     cf4:	8f a7       	std	Y+47, r24	; 0x2f
     cf6:	3f c0       	rjmp	.+126    	; 0xd76 <setting_password+0x134>
	else if (__tmp > 65535)
     cf8:	69 a9       	ldd	r22, Y+49	; 0x31
     cfa:	7a a9       	ldd	r23, Y+50	; 0x32
     cfc:	8b a9       	ldd	r24, Y+51	; 0x33
     cfe:	9c a9       	ldd	r25, Y+52	; 0x34
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	3f ef       	ldi	r19, 0xFF	; 255
     d04:	4f e7       	ldi	r20, 0x7F	; 127
     d06:	57 e4       	ldi	r21, 0x47	; 71
     d08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d0c:	18 16       	cp	r1, r24
     d0e:	4c f5       	brge	.+82     	; 0xd62 <setting_password+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d10:	6d a9       	ldd	r22, Y+53	; 0x35
     d12:	7e a9       	ldd	r23, Y+54	; 0x36
     d14:	8f a9       	ldd	r24, Y+55	; 0x37
     d16:	98 ad       	ldd	r25, Y+56	; 0x38
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e2       	ldi	r20, 0x20	; 32
     d1e:	51 e4       	ldi	r21, 0x41	; 65
     d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	bc 01       	movw	r22, r24
     d2a:	cd 01       	movw	r24, r26
     d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	98 ab       	std	Y+48, r25	; 0x30
     d36:	8f a7       	std	Y+47, r24	; 0x2f
     d38:	0f c0       	rjmp	.+30     	; 0xd58 <setting_password+0x116>
     d3a:	88 ec       	ldi	r24, 0xC8	; 200
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9e a7       	std	Y+46, r25	; 0x2e
     d40:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d42:	8d a5       	ldd	r24, Y+45	; 0x2d
     d44:	9e a5       	ldd	r25, Y+46	; 0x2e
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <setting_password+0x104>
     d4a:	9e a7       	std	Y+46, r25	; 0x2e
     d4c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d50:	98 a9       	ldd	r25, Y+48	; 0x30
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	98 ab       	std	Y+48, r25	; 0x30
     d56:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d58:	8f a5       	ldd	r24, Y+47	; 0x2f
     d5a:	98 a9       	ldd	r25, Y+48	; 0x30
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	69 f7       	brne	.-38     	; 0xd3a <setting_password+0xf8>
     d60:	14 c0       	rjmp	.+40     	; 0xd8a <setting_password+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d62:	69 a9       	ldd	r22, Y+49	; 0x31
     d64:	7a a9       	ldd	r23, Y+50	; 0x32
     d66:	8b a9       	ldd	r24, Y+51	; 0x33
     d68:	9c a9       	ldd	r25, Y+52	; 0x34
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	98 ab       	std	Y+48, r25	; 0x30
     d74:	8f a7       	std	Y+47, r24	; 0x2f
     d76:	8f a5       	ldd	r24, Y+47	; 0x2f
     d78:	98 a9       	ldd	r25, Y+48	; 0x30
     d7a:	9c a7       	std	Y+44, r25	; 0x2c
     d7c:	8b a7       	std	Y+43, r24	; 0x2b
     d7e:	8b a5       	ldd	r24, Y+43	; 0x2b
     d80:	9c a5       	ldd	r25, Y+44	; 0x2c
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <setting_password+0x140>
     d86:	9c a7       	std	Y+44, r25	; 0x2c
     d88:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_moveCursor(0, 0);
	LCD_displayString("Enter Password");
	LCD_moveCursor(1, 0);

	/* get the key and send it by UART */
	for(i=0;i<5;i++){
     d8a:	80 91 f4 00 	lds	r24, 0x00F4
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	80 93 f4 00 	sts	0x00F4, r24
     d94:	80 91 f4 00 	lds	r24, 0x00F4
     d98:	85 30       	cpi	r24, 0x05	; 5
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <setting_password+0x15c>
     d9c:	6d cf       	rjmp	.-294    	; 0xc78 <setting_password+0x36>
		pass[i] = KEYPAD_getPressedKey();
		UART_sendByte(pass[i]);
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	g_key = KEYPAD_getPressedKey();  /*enter key to get to the next stage*/
     d9e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <KEYPAD_getPressedKey>
     da2:	80 93 03 01 	sts	0x0103, r24
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	aa ef       	ldi	r26, 0xFA	; 250
     dac:	b3 e4       	ldi	r27, 0x43	; 67
     dae:	8f a3       	std	Y+39, r24	; 0x27
     db0:	98 a7       	std	Y+40, r25	; 0x28
     db2:	a9 a7       	std	Y+41, r26	; 0x29
     db4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db6:	6f a1       	ldd	r22, Y+39	; 0x27
     db8:	78 a5       	ldd	r23, Y+40	; 0x28
     dba:	89 a5       	ldd	r24, Y+41	; 0x29
     dbc:	9a a5       	ldd	r25, Y+42	; 0x2a
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	4a ef       	ldi	r20, 0xFA	; 250
     dc4:	54 e4       	ldi	r21, 0x44	; 68
     dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	8b a3       	std	Y+35, r24	; 0x23
     dd0:	9c a3       	std	Y+36, r25	; 0x24
     dd2:	ad a3       	std	Y+37, r26	; 0x25
     dd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dd6:	6b a1       	ldd	r22, Y+35	; 0x23
     dd8:	7c a1       	ldd	r23, Y+36	; 0x24
     dda:	8d a1       	ldd	r24, Y+37	; 0x25
     ddc:	9e a1       	ldd	r25, Y+38	; 0x26
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e8       	ldi	r20, 0x80	; 128
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dea:	88 23       	and	r24, r24
     dec:	2c f4       	brge	.+10     	; 0xdf8 <setting_password+0x1b6>
		__ticks = 1;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9a a3       	std	Y+34, r25	; 0x22
     df4:	89 a3       	std	Y+33, r24	; 0x21
     df6:	3f c0       	rjmp	.+126    	; 0xe76 <setting_password+0x234>
	else if (__tmp > 65535)
     df8:	6b a1       	ldd	r22, Y+35	; 0x23
     dfa:	7c a1       	ldd	r23, Y+36	; 0x24
     dfc:	8d a1       	ldd	r24, Y+37	; 0x25
     dfe:	9e a1       	ldd	r25, Y+38	; 0x26
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	3f ef       	ldi	r19, 0xFF	; 255
     e04:	4f e7       	ldi	r20, 0x7F	; 127
     e06:	57 e4       	ldi	r21, 0x47	; 71
     e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e0c:	18 16       	cp	r1, r24
     e0e:	4c f5       	brge	.+82     	; 0xe62 <setting_password+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e10:	6f a1       	ldd	r22, Y+39	; 0x27
     e12:	78 a5       	ldd	r23, Y+40	; 0x28
     e14:	89 a5       	ldd	r24, Y+41	; 0x29
     e16:	9a a5       	ldd	r25, Y+42	; 0x2a
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e2       	ldi	r20, 0x20	; 32
     e1e:	51 e4       	ldi	r21, 0x41	; 65
     e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	bc 01       	movw	r22, r24
     e2a:	cd 01       	movw	r24, r26
     e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9a a3       	std	Y+34, r25	; 0x22
     e36:	89 a3       	std	Y+33, r24	; 0x21
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <setting_password+0x216>
     e3a:	88 ec       	ldi	r24, 0xC8	; 200
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	98 a3       	std	Y+32, r25	; 0x20
     e40:	8f 8f       	std	Y+31, r24	; 0x1f
     e42:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e44:	98 a1       	ldd	r25, Y+32	; 0x20
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <setting_password+0x204>
     e4a:	98 a3       	std	Y+32, r25	; 0x20
     e4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4e:	89 a1       	ldd	r24, Y+33	; 0x21
     e50:	9a a1       	ldd	r25, Y+34	; 0x22
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	9a a3       	std	Y+34, r25	; 0x22
     e56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e58:	89 a1       	ldd	r24, Y+33	; 0x21
     e5a:	9a a1       	ldd	r25, Y+34	; 0x22
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	69 f7       	brne	.-38     	; 0xe3a <setting_password+0x1f8>
     e60:	14 c0       	rjmp	.+40     	; 0xe8a <setting_password+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e62:	6b a1       	ldd	r22, Y+35	; 0x23
     e64:	7c a1       	ldd	r23, Y+36	; 0x24
     e66:	8d a1       	ldd	r24, Y+37	; 0x25
     e68:	9e a1       	ldd	r25, Y+38	; 0x26
     e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9a a3       	std	Y+34, r25	; 0x22
     e74:	89 a3       	std	Y+33, r24	; 0x21
     e76:	89 a1       	ldd	r24, Y+33	; 0x21
     e78:	9a a1       	ldd	r25, Y+34	; 0x22
     e7a:	9e 8f       	std	Y+30, r25	; 0x1e
     e7c:	8d 8f       	std	Y+29, r24	; 0x1d
     e7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e80:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <setting_password+0x240>
     e86:	9e 8f       	std	Y+30, r25	; 0x1e
     e88:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(500);

	LCD_clearScreen();
     e8a:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_clearScreen>

	/*repeat the same steps*/
	LCD_moveCursor(0, 0);
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>
	LCD_displayString("ReEnter Password");
     e96:	85 ea       	ldi	r24, 0xA5	; 165
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
	LCD_moveCursor(1, 0);
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>

	for(i=0;i<5;i++){
     ea6:	10 92 f4 00 	sts	0x00F4, r1
     eaa:	8e c0       	rjmp	.+284    	; 0xfc8 <setting_password+0x386>
		pass_reenter[i] = KEYPAD_getPressedKey();
     eac:	80 91 f4 00 	lds	r24, 0x00F4
     eb0:	08 2f       	mov	r16, r24
     eb2:	10 e0       	ldi	r17, 0x00	; 0
     eb4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <KEYPAD_getPressedKey>
     eb8:	f8 01       	movw	r30, r16
     eba:	e1 51       	subi	r30, 0x11	; 17
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 83       	st	Z, r24
		UART_sendByte(pass_reenter[i]);
     ec0:	80 91 f4 00 	lds	r24, 0x00F4
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	fc 01       	movw	r30, r24
     eca:	e1 51       	subi	r30, 0x11	; 17
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	80 81       	ld	r24, Z
     ed0:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_sendByte>
		LCD_displayCharacter('*');
     ed4:	8a e2       	ldi	r24, 0x2A	; 42
     ed6:	0e 94 40 11 	call	0x2280	; 0x2280 <LCD_displayCharacter>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	aa ef       	ldi	r26, 0xFA	; 250
     ee0:	b3 e4       	ldi	r27, 0x43	; 67
     ee2:	89 8f       	std	Y+25, r24	; 0x19
     ee4:	9a 8f       	std	Y+26, r25	; 0x1a
     ee6:	ab 8f       	std	Y+27, r26	; 0x1b
     ee8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eea:	69 8d       	ldd	r22, Y+25	; 0x19
     eec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	4a ef       	ldi	r20, 0xFA	; 250
     ef8:	54 e4       	ldi	r21, 0x44	; 68
     efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	8d 8b       	std	Y+21, r24	; 0x15
     f04:	9e 8b       	std	Y+22, r25	; 0x16
     f06:	af 8b       	std	Y+23, r26	; 0x17
     f08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f0a:	6d 89       	ldd	r22, Y+21	; 0x15
     f0c:	7e 89       	ldd	r23, Y+22	; 0x16
     f0e:	8f 89       	ldd	r24, Y+23	; 0x17
     f10:	98 8d       	ldd	r25, Y+24	; 0x18
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e8       	ldi	r20, 0x80	; 128
     f18:	5f e3       	ldi	r21, 0x3F	; 63
     f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f1e:	88 23       	and	r24, r24
     f20:	2c f4       	brge	.+10     	; 0xf2c <setting_password+0x2ea>
		__ticks = 1;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9c 8b       	std	Y+20, r25	; 0x14
     f28:	8b 8b       	std	Y+19, r24	; 0x13
     f2a:	3f c0       	rjmp	.+126    	; 0xfaa <setting_password+0x368>
	else if (__tmp > 65535)
     f2c:	6d 89       	ldd	r22, Y+21	; 0x15
     f2e:	7e 89       	ldd	r23, Y+22	; 0x16
     f30:	8f 89       	ldd	r24, Y+23	; 0x17
     f32:	98 8d       	ldd	r25, Y+24	; 0x18
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	3f ef       	ldi	r19, 0xFF	; 255
     f38:	4f e7       	ldi	r20, 0x7F	; 127
     f3a:	57 e4       	ldi	r21, 0x47	; 71
     f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f40:	18 16       	cp	r1, r24
     f42:	4c f5       	brge	.+82     	; 0xf96 <setting_password+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f44:	69 8d       	ldd	r22, Y+25	; 0x19
     f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e2       	ldi	r20, 0x20	; 32
     f52:	51 e4       	ldi	r21, 0x41	; 65
     f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	bc 01       	movw	r22, r24
     f5e:	cd 01       	movw	r24, r26
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9c 8b       	std	Y+20, r25	; 0x14
     f6a:	8b 8b       	std	Y+19, r24	; 0x13
     f6c:	0f c0       	rjmp	.+30     	; 0xf8c <setting_password+0x34a>
     f6e:	88 ec       	ldi	r24, 0xC8	; 200
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9a 8b       	std	Y+18, r25	; 0x12
     f74:	89 8b       	std	Y+17, r24	; 0x11
     f76:	89 89       	ldd	r24, Y+17	; 0x11
     f78:	9a 89       	ldd	r25, Y+18	; 0x12
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <setting_password+0x338>
     f7e:	9a 8b       	std	Y+18, r25	; 0x12
     f80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f82:	8b 89       	ldd	r24, Y+19	; 0x13
     f84:	9c 89       	ldd	r25, Y+20	; 0x14
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	9c 8b       	std	Y+20, r25	; 0x14
     f8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8c:	8b 89       	ldd	r24, Y+19	; 0x13
     f8e:	9c 89       	ldd	r25, Y+20	; 0x14
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	69 f7       	brne	.-38     	; 0xf6e <setting_password+0x32c>
     f94:	14 c0       	rjmp	.+40     	; 0xfbe <setting_password+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f96:	6d 89       	ldd	r22, Y+21	; 0x15
     f98:	7e 89       	ldd	r23, Y+22	; 0x16
     f9a:	8f 89       	ldd	r24, Y+23	; 0x17
     f9c:	98 8d       	ldd	r25, Y+24	; 0x18
     f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	9c 8b       	std	Y+20, r25	; 0x14
     fa8:	8b 8b       	std	Y+19, r24	; 0x13
     faa:	8b 89       	ldd	r24, Y+19	; 0x13
     fac:	9c 89       	ldd	r25, Y+20	; 0x14
     fae:	98 8b       	std	Y+16, r25	; 0x10
     fb0:	8f 87       	std	Y+15, r24	; 0x0f
     fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb4:	98 89       	ldd	r25, Y+16	; 0x10
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <setting_password+0x374>
     fba:	98 8b       	std	Y+16, r25	; 0x10
     fbc:	8f 87       	std	Y+15, r24	; 0x0f
	/*repeat the same steps*/
	LCD_moveCursor(0, 0);
	LCD_displayString("ReEnter Password");
	LCD_moveCursor(1, 0);

	for(i=0;i<5;i++){
     fbe:	80 91 f4 00 	lds	r24, 0x00F4
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	80 93 f4 00 	sts	0x00F4, r24
     fc8:	80 91 f4 00 	lds	r24, 0x00F4
     fcc:	85 30       	cpi	r24, 0x05	; 5
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <setting_password+0x390>
     fd0:	6d cf       	rjmp	.-294    	; 0xeac <setting_password+0x26a>
		pass_reenter[i] = KEYPAD_getPressedKey();
		UART_sendByte(pass_reenter[i]);
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	g_key = KEYPAD_getPressedKey();  /*enter key to get to the next stage*/
     fd2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <KEYPAD_getPressedKey>
     fd6:	80 93 03 01 	sts	0x0103, r24
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	aa ef       	ldi	r26, 0xFA	; 250
     fe0:	b3 e4       	ldi	r27, 0x43	; 67
     fe2:	8b 87       	std	Y+11, r24	; 0x0b
     fe4:	9c 87       	std	Y+12, r25	; 0x0c
     fe6:	ad 87       	std	Y+13, r26	; 0x0d
     fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fea:	6b 85       	ldd	r22, Y+11	; 0x0b
     fec:	7c 85       	ldd	r23, Y+12	; 0x0c
     fee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a ef       	ldi	r20, 0xFA	; 250
     ff8:	54 e4       	ldi	r21, 0x44	; 68
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	8f 83       	std	Y+7, r24	; 0x07
    1004:	98 87       	std	Y+8, r25	; 0x08
    1006:	a9 87       	std	Y+9, r26	; 0x09
    1008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    100a:	6f 81       	ldd	r22, Y+7	; 0x07
    100c:	78 85       	ldd	r23, Y+8	; 0x08
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e8       	ldi	r20, 0x80	; 128
    1018:	5f e3       	ldi	r21, 0x3F	; 63
    101a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    101e:	88 23       	and	r24, r24
    1020:	2c f4       	brge	.+10     	; 0x102c <setting_password+0x3ea>
		__ticks = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9e 83       	std	Y+6, r25	; 0x06
    1028:	8d 83       	std	Y+5, r24	; 0x05
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <setting_password+0x468>
	else if (__tmp > 65535)
    102c:	6f 81       	ldd	r22, Y+7	; 0x07
    102e:	78 85       	ldd	r23, Y+8	; 0x08
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	4f e7       	ldi	r20, 0x7F	; 127
    103a:	57 e4       	ldi	r21, 0x47	; 71
    103c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1040:	18 16       	cp	r1, r24
    1042:	4c f5       	brge	.+82     	; 0x1096 <setting_password+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	6b 85       	ldd	r22, Y+11	; 0x0b
    1046:	7c 85       	ldd	r23, Y+12	; 0x0c
    1048:	8d 85       	ldd	r24, Y+13	; 0x0d
    104a:	9e 85       	ldd	r25, Y+14	; 0x0e
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	0f c0       	rjmp	.+30     	; 0x108c <setting_password+0x44a>
    106e:	88 ec       	ldi	r24, 0xC8	; 200
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <setting_password+0x438>
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	69 f7       	brne	.-38     	; 0x106e <setting_password+0x42c>
    1094:	14 c0       	rjmp	.+40     	; 0x10be <setting_password+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1096:	6f 81       	ldd	r22, Y+7	; 0x07
    1098:	78 85       	ldd	r23, Y+8	; 0x08
    109a:	89 85       	ldd	r24, Y+9	; 0x09
    109c:	9a 85       	ldd	r25, Y+10	; 0x0a
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	9e 83       	std	Y+6, r25	; 0x06
    10a8:	8d 83       	std	Y+5, r24	; 0x05
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <setting_password+0x474>
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	LCD_clearScreen();
    10be:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_clearScreen>
	flag = UART_recieveByte();   /* receive flag to check whether two inputs match or not */
    10c2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <UART_recieveByte>
    10c6:	80 93 f8 00 	sts	0x00F8, r24
}
    10ca:	e8 96       	adiw	r28, 0x38	; 56
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	08 95       	ret

000010e0 <check_password>:
void check_password(void){                /* function to compare the input to the stored data in the EEPROM */
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	6c 97       	sbiw	r28, 0x1c	; 28
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
	do{
		/*set cursor position and print and set cursor to new line*/
		LCD_moveCursor(0, 0);
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>
		LCD_displayString("Enter Password");
    1100:	86 e9       	ldi	r24, 0x96	; 150
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
		LCD_moveCursor(1, 0);
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>

		/* get the key and send it by UART */
		for(i=0;i<5;i++){
    1110:	10 92 f4 00 	sts	0x00F4, r1
    1114:	84 c0       	rjmp	.+264    	; 0x121e <check_password+0x13e>
			pass[i] = KEYPAD_getPressedKey();
    1116:	80 91 f4 00 	lds	r24, 0x00F4
    111a:	08 2f       	mov	r16, r24
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <KEYPAD_getPressedKey>
    1122:	f8 01       	movw	r30, r16
    1124:	e6 51       	subi	r30, 0x16	; 22
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	80 83       	st	Z, r24

			LCD_displayCharacter('*');
    112a:	8a e2       	ldi	r24, 0x2A	; 42
    112c:	0e 94 40 11 	call	0x2280	; 0x2280 <LCD_displayCharacter>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	aa ef       	ldi	r26, 0xFA	; 250
    1136:	b3 e4       	ldi	r27, 0x43	; 67
    1138:	89 8f       	std	Y+25, r24	; 0x19
    113a:	9a 8f       	std	Y+26, r25	; 0x1a
    113c:	ab 8f       	std	Y+27, r26	; 0x1b
    113e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1140:	69 8d       	ldd	r22, Y+25	; 0x19
    1142:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1144:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1146:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	4a ef       	ldi	r20, 0xFA	; 250
    114e:	54 e4       	ldi	r21, 0x44	; 68
    1150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	8d 8b       	std	Y+21, r24	; 0x15
    115a:	9e 8b       	std	Y+22, r25	; 0x16
    115c:	af 8b       	std	Y+23, r26	; 0x17
    115e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1160:	6d 89       	ldd	r22, Y+21	; 0x15
    1162:	7e 89       	ldd	r23, Y+22	; 0x16
    1164:	8f 89       	ldd	r24, Y+23	; 0x17
    1166:	98 8d       	ldd	r25, Y+24	; 0x18
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1174:	88 23       	and	r24, r24
    1176:	2c f4       	brge	.+10     	; 0x1182 <check_password+0xa2>
		__ticks = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9c 8b       	std	Y+20, r25	; 0x14
    117e:	8b 8b       	std	Y+19, r24	; 0x13
    1180:	3f c0       	rjmp	.+126    	; 0x1200 <check_password+0x120>
	else if (__tmp > 65535)
    1182:	6d 89       	ldd	r22, Y+21	; 0x15
    1184:	7e 89       	ldd	r23, Y+22	; 0x16
    1186:	8f 89       	ldd	r24, Y+23	; 0x17
    1188:	98 8d       	ldd	r25, Y+24	; 0x18
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	3f ef       	ldi	r19, 0xFF	; 255
    118e:	4f e7       	ldi	r20, 0x7F	; 127
    1190:	57 e4       	ldi	r21, 0x47	; 71
    1192:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1196:	18 16       	cp	r1, r24
    1198:	4c f5       	brge	.+82     	; 0x11ec <check_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119a:	69 8d       	ldd	r22, Y+25	; 0x19
    119c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    119e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	9c 8b       	std	Y+20, r25	; 0x14
    11c0:	8b 8b       	std	Y+19, r24	; 0x13
    11c2:	0f c0       	rjmp	.+30     	; 0x11e2 <check_password+0x102>
    11c4:	88 ec       	ldi	r24, 0xC8	; 200
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9a 8b       	std	Y+18, r25	; 0x12
    11ca:	89 8b       	std	Y+17, r24	; 0x11
    11cc:	89 89       	ldd	r24, Y+17	; 0x11
    11ce:	9a 89       	ldd	r25, Y+18	; 0x12
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <check_password+0xf0>
    11d4:	9a 8b       	std	Y+18, r25	; 0x12
    11d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d8:	8b 89       	ldd	r24, Y+19	; 0x13
    11da:	9c 89       	ldd	r25, Y+20	; 0x14
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	9c 8b       	std	Y+20, r25	; 0x14
    11e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e2:	8b 89       	ldd	r24, Y+19	; 0x13
    11e4:	9c 89       	ldd	r25, Y+20	; 0x14
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	69 f7       	brne	.-38     	; 0x11c4 <check_password+0xe4>
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <check_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ec:	6d 89       	ldd	r22, Y+21	; 0x15
    11ee:	7e 89       	ldd	r23, Y+22	; 0x16
    11f0:	8f 89       	ldd	r24, Y+23	; 0x17
    11f2:	98 8d       	ldd	r25, Y+24	; 0x18
    11f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	9c 8b       	std	Y+20, r25	; 0x14
    11fe:	8b 8b       	std	Y+19, r24	; 0x13
    1200:	8b 89       	ldd	r24, Y+19	; 0x13
    1202:	9c 89       	ldd	r25, Y+20	; 0x14
    1204:	98 8b       	std	Y+16, r25	; 0x10
    1206:	8f 87       	std	Y+15, r24	; 0x0f
    1208:	8f 85       	ldd	r24, Y+15	; 0x0f
    120a:	98 89       	ldd	r25, Y+16	; 0x10
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <check_password+0x12c>
    1210:	98 8b       	std	Y+16, r25	; 0x10
    1212:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_moveCursor(0, 0);
		LCD_displayString("Enter Password");
		LCD_moveCursor(1, 0);

		/* get the key and send it by UART */
		for(i=0;i<5;i++){
    1214:	80 91 f4 00 	lds	r24, 0x00F4
    1218:	8f 5f       	subi	r24, 0xFF	; 255
    121a:	80 93 f4 00 	sts	0x00F4, r24
    121e:	80 91 f4 00 	lds	r24, 0x00F4
    1222:	85 30       	cpi	r24, 0x05	; 5
    1224:	08 f4       	brcc	.+2      	; 0x1228 <check_password+0x148>
    1226:	77 cf       	rjmp	.-274    	; 0x1116 <check_password+0x36>
			pass[i] = KEYPAD_getPressedKey();

			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		g_key = KEYPAD_getPressedKey();  /*enter key to get to the next stage*/
    1228:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <KEYPAD_getPressedKey>
    122c:	80 93 03 01 	sts	0x0103, r24
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	aa ef       	ldi	r26, 0xFA	; 250
    1236:	b3 e4       	ldi	r27, 0x43	; 67
    1238:	8b 87       	std	Y+11, r24	; 0x0b
    123a:	9c 87       	std	Y+12, r25	; 0x0c
    123c:	ad 87       	std	Y+13, r26	; 0x0d
    123e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1240:	6b 85       	ldd	r22, Y+11	; 0x0b
    1242:	7c 85       	ldd	r23, Y+12	; 0x0c
    1244:	8d 85       	ldd	r24, Y+13	; 0x0d
    1246:	9e 85       	ldd	r25, Y+14	; 0x0e
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	4a ef       	ldi	r20, 0xFA	; 250
    124e:	54 e4       	ldi	r21, 0x44	; 68
    1250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	8f 83       	std	Y+7, r24	; 0x07
    125a:	98 87       	std	Y+8, r25	; 0x08
    125c:	a9 87       	std	Y+9, r26	; 0x09
    125e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1260:	6f 81       	ldd	r22, Y+7	; 0x07
    1262:	78 85       	ldd	r23, Y+8	; 0x08
    1264:	89 85       	ldd	r24, Y+9	; 0x09
    1266:	9a 85       	ldd	r25, Y+10	; 0x0a
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e8       	ldi	r20, 0x80	; 128
    126e:	5f e3       	ldi	r21, 0x3F	; 63
    1270:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1274:	88 23       	and	r24, r24
    1276:	2c f4       	brge	.+10     	; 0x1282 <check_password+0x1a2>
		__ticks = 1;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	9e 83       	std	Y+6, r25	; 0x06
    127e:	8d 83       	std	Y+5, r24	; 0x05
    1280:	3f c0       	rjmp	.+126    	; 0x1300 <check_password+0x220>
	else if (__tmp > 65535)
    1282:	6f 81       	ldd	r22, Y+7	; 0x07
    1284:	78 85       	ldd	r23, Y+8	; 0x08
    1286:	89 85       	ldd	r24, Y+9	; 0x09
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	3f ef       	ldi	r19, 0xFF	; 255
    128e:	4f e7       	ldi	r20, 0x7F	; 127
    1290:	57 e4       	ldi	r21, 0x47	; 71
    1292:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1296:	18 16       	cp	r1, r24
    1298:	4c f5       	brge	.+82     	; 0x12ec <check_password+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129a:	6b 85       	ldd	r22, Y+11	; 0x0b
    129c:	7c 85       	ldd	r23, Y+12	; 0x0c
    129e:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e2       	ldi	r20, 0x20	; 32
    12a8:	51 e4       	ldi	r21, 0x41	; 65
    12aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	bc 01       	movw	r22, r24
    12b4:	cd 01       	movw	r24, r26
    12b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	0f c0       	rjmp	.+30     	; 0x12e2 <check_password+0x202>
    12c4:	88 ec       	ldi	r24, 0xC8	; 200
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <check_password+0x1f0>
    12d4:	9c 83       	std	Y+4, r25	; 0x04
    12d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	69 f7       	brne	.-38     	; 0x12c4 <check_password+0x1e4>
    12ea:	14 c0       	rjmp	.+40     	; 0x1314 <check_password+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ec:	6f 81       	ldd	r22, Y+7	; 0x07
    12ee:	78 85       	ldd	r23, Y+8	; 0x08
    12f0:	89 85       	ldd	r24, Y+9	; 0x09
    12f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	9e 83       	std	Y+6, r25	; 0x06
    12fe:	8d 83       	std	Y+5, r24	; 0x05
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	9a 81       	ldd	r25, Y+2	; 0x02
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <check_password+0x22c>
    1310:	9a 83       	std	Y+2, r25	; 0x02
    1312:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(500);
		for(i=0;i<5;i++){
    1314:	10 92 f4 00 	sts	0x00F4, r1
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <check_password+0x258>
			UART_sendByte(pass[i]);
    131a:	80 91 f4 00 	lds	r24, 0x00F4
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fc 01       	movw	r30, r24
    1324:	e6 51       	subi	r30, 0x16	; 22
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	80 81       	ld	r24, Z
    132a:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_sendByte>
			_delay_ms(500);
		}
		g_key = KEYPAD_getPressedKey();  /*enter key to get to the next stage*/

		_delay_ms(500);
		for(i=0;i<5;i++){
    132e:	80 91 f4 00 	lds	r24, 0x00F4
    1332:	8f 5f       	subi	r24, 0xFF	; 255
    1334:	80 93 f4 00 	sts	0x00F4, r24
    1338:	80 91 f4 00 	lds	r24, 0x00F4
    133c:	85 30       	cpi	r24, 0x05	; 5
    133e:	68 f3       	brcs	.-38     	; 0x131a <check_password+0x23a>
			UART_sendByte(pass[i]);
		}
		LCD_clearScreen();
    1340:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_clearScreen>

		count = UART_recieveByte();    /* receive count flag */
    1344:	0e 94 5d 17 	call	0x2eba	; 0x2eba <UART_recieveByte>
    1348:	80 93 f7 00 	sts	0x00F7, r24
		g_mismatch_flag =UART_recieveByte();   /* receive g_mismatch_flag */
    134c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <UART_recieveByte>
    1350:	80 93 f9 00 	sts	0x00F9, r24

	}while(count<3 && g_mismatch_flag == 0);   /*repeat for maximum 3 times or if input was right before 3rd time*/
    1354:	80 91 f7 00 	lds	r24, 0x00F7
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	28 f4       	brcc	.+10     	; 0x1366 <check_password+0x286>
    135c:	80 91 f9 00 	lds	r24, 0x00F9
    1360:	88 23       	and	r24, r24
    1362:	09 f4       	brne	.+2      	; 0x1366 <check_password+0x286>
    1364:	c9 ce       	rjmp	.-622    	; 0x10f8 <check_password+0x18>

}
    1366:	6c 96       	adiw	r28, 0x1c	; 28
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <main>:
int main(void){
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	a6 97       	sbiw	r28, 0x26	; 38
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
	SREG |=(1<<7);    /*enable global interrupts*/
    1390:	af e5       	ldi	r26, 0x5F	; 95
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ef e5       	ldi	r30, 0x5F	; 95
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 68       	ori	r24, 0x80	; 128
    139c:	8c 93       	st	X, r24
	 * prescalar: 1024
	 * mode: Overflow
	 * initial value: 0
	 * compare value (in case using compare mode): 0
	 */
	Timer_ConfigType my_timer = {timer0,Overflow,timer0_1_1024,0,0};
    139e:	ce 01       	movw	r24, r28
    13a0:	0f 96       	adiw	r24, 0x0f	; 15
    13a2:	9e 8f       	std	Y+30, r25	; 0x1e
    13a4:	8d 8f       	std	Y+29, r24	; 0x1d
    13a6:	e2 ee       	ldi	r30, 0xE2	; 226
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	f8 a3       	std	Y+32, r31	; 0x20
    13ac:	ef 8f       	std	Y+31, r30	; 0x1f
    13ae:	f7 e0       	ldi	r31, 0x07	; 7
    13b0:	f9 a3       	std	Y+33, r31	; 0x21
    13b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    13b4:	f8 a1       	ldd	r31, Y+32	; 0x20
    13b6:	00 80       	ld	r0, Z
    13b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13ba:	98 a1       	ldd	r25, Y+32	; 0x20
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	98 a3       	std	Y+32, r25	; 0x20
    13c0:	8f 8f       	std	Y+31, r24	; 0x1f
    13c2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    13c4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    13c6:	00 82       	st	Z, r0
    13c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	9e 8f       	std	Y+30, r25	; 0x1e
    13d0:	8d 8f       	std	Y+29, r24	; 0x1d
    13d2:	99 a1       	ldd	r25, Y+33	; 0x21
    13d4:	91 50       	subi	r25, 0x01	; 1
    13d6:	99 a3       	std	Y+33, r25	; 0x21
    13d8:	e9 a1       	ldd	r30, Y+33	; 0x21
    13da:	ee 23       	and	r30, r30
    13dc:	51 f7       	brne	.-44     	; 0x13b2 <main+0x36>
	 * work with 8 bits data
	 * no parity bit
	 * one bit for stop bit
	 * baud rate = 9600
	 */
	UART_ConfigType myConfig ={eight_bits,No_parity,one_bit,9600};
    13de:	ce 01       	movw	r24, r28
    13e0:	46 96       	adiw	r24, 0x16	; 22
    13e2:	9b a3       	std	Y+35, r25	; 0x23
    13e4:	8a a3       	std	Y+34, r24	; 0x22
    13e6:	eb ed       	ldi	r30, 0xDB	; 219
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	fd a3       	std	Y+37, r31	; 0x25
    13ec:	ec a3       	std	Y+36, r30	; 0x24
    13ee:	f7 e0       	ldi	r31, 0x07	; 7
    13f0:	fe a3       	std	Y+38, r31	; 0x26
    13f2:	ec a1       	ldd	r30, Y+36	; 0x24
    13f4:	fd a1       	ldd	r31, Y+37	; 0x25
    13f6:	00 80       	ld	r0, Z
    13f8:	8c a1       	ldd	r24, Y+36	; 0x24
    13fa:	9d a1       	ldd	r25, Y+37	; 0x25
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	9d a3       	std	Y+37, r25	; 0x25
    1400:	8c a3       	std	Y+36, r24	; 0x24
    1402:	ea a1       	ldd	r30, Y+34	; 0x22
    1404:	fb a1       	ldd	r31, Y+35	; 0x23
    1406:	00 82       	st	Z, r0
    1408:	8a a1       	ldd	r24, Y+34	; 0x22
    140a:	9b a1       	ldd	r25, Y+35	; 0x23
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	9b a3       	std	Y+35, r25	; 0x23
    1410:	8a a3       	std	Y+34, r24	; 0x22
    1412:	9e a1       	ldd	r25, Y+38	; 0x26
    1414:	91 50       	subi	r25, 0x01	; 1
    1416:	9e a3       	std	Y+38, r25	; 0x26
    1418:	ee a1       	ldd	r30, Y+38	; 0x26
    141a:	ee 23       	and	r30, r30
    141c:	51 f7       	brne	.-44     	; 0x13f2 <main+0x76>
	UART_init(&myConfig);
    141e:	ce 01       	movw	r24, r28
    1420:	46 96       	adiw	r24, 0x16	; 22
    1422:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <UART_init>

	LCD_init();  /*initialize LCD*/
    1426:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <LCD_init>

	do{
		setting_password();     /*set password for the first time*/
    142a:	0e 94 21 06 	call	0xc42	; 0xc42 <setting_password>
	}while(flag == 0x31);
    142e:	80 91 f8 00 	lds	r24, 0x00F8
    1432:	81 33       	cpi	r24, 0x31	; 49
    1434:	d1 f3       	breq	.-12     	; 0x142a <main+0xae>

	while(1){

		/*print main menu*/
		LCD_moveCursor(0, 0);
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>
		LCD_displayString("+: Open Door");
    143e:	86 eb       	ldi	r24, 0xB6	; 182
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
		LCD_moveCursor(1, 0);
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>
		LCD_displayString("-: change pass");
    144e:	83 ec       	ldi	r24, 0xC3	; 195
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
		LCD_moveCursor(2, 0);
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>

		g_key = KEYPAD_getPressedKey();
    145e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <KEYPAD_getPressedKey>
    1462:	80 93 03 01 	sts	0x0103, r24
		UART_sendByte(g_key);    /*send chosen option*/
    1466:	80 91 03 01 	lds	r24, 0x0103
    146a:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_sendByte>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	aa ef       	ldi	r26, 0xFA	; 250
    1474:	b3 e4       	ldi	r27, 0x43	; 67
    1476:	8b 87       	std	Y+11, r24	; 0x0b
    1478:	9c 87       	std	Y+12, r25	; 0x0c
    147a:	ad 87       	std	Y+13, r26	; 0x0d
    147c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1480:	7c 85       	ldd	r23, Y+12	; 0x0c
    1482:	8d 85       	ldd	r24, Y+13	; 0x0d
    1484:	9e 85       	ldd	r25, Y+14	; 0x0e
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	4a ef       	ldi	r20, 0xFA	; 250
    148c:	54 e4       	ldi	r21, 0x44	; 68
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	8f 83       	std	Y+7, r24	; 0x07
    1498:	98 87       	std	Y+8, r25	; 0x08
    149a:	a9 87       	std	Y+9, r26	; 0x09
    149c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    149e:	6f 81       	ldd	r22, Y+7	; 0x07
    14a0:	78 85       	ldd	r23, Y+8	; 0x08
    14a2:	89 85       	ldd	r24, Y+9	; 0x09
    14a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e8       	ldi	r20, 0x80	; 128
    14ac:	5f e3       	ldi	r21, 0x3F	; 63
    14ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b2:	88 23       	and	r24, r24
    14b4:	2c f4       	brge	.+10     	; 0x14c0 <main+0x144>
		__ticks = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9e 83       	std	Y+6, r25	; 0x06
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	3f c0       	rjmp	.+126    	; 0x153e <main+0x1c2>
	else if (__tmp > 65535)
    14c0:	6f 81       	ldd	r22, Y+7	; 0x07
    14c2:	78 85       	ldd	r23, Y+8	; 0x08
    14c4:	89 85       	ldd	r24, Y+9	; 0x09
    14c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	3f ef       	ldi	r19, 0xFF	; 255
    14cc:	4f e7       	ldi	r20, 0x7F	; 127
    14ce:	57 e4       	ldi	r21, 0x47	; 71
    14d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d4:	18 16       	cp	r1, r24
    14d6:	4c f5       	brge	.+82     	; 0x152a <main+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14da:	7c 85       	ldd	r23, Y+12	; 0x0c
    14dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14de:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e2       	ldi	r20, 0x20	; 32
    14e6:	51 e4       	ldi	r21, 0x41	; 65
    14e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	bc 01       	movw	r22, r24
    14f2:	cd 01       	movw	r24, r26
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	0f c0       	rjmp	.+30     	; 0x1520 <main+0x1a4>
    1502:	88 ec       	ldi	r24, 0xC8	; 200
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <main+0x192>
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	69 f7       	brne	.-38     	; 0x1502 <main+0x186>
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <main+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152a:	6f 81       	ldd	r22, Y+7	; 0x07
    152c:	78 85       	ldd	r23, Y+8	; 0x08
    152e:	89 85       	ldd	r24, Y+9	; 0x09
    1530:	9a 85       	ldd	r25, Y+10	; 0x0a
    1532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <main+0x1ce>
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);

		LCD_clearScreen();
    1552:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_clearScreen>
		if(g_key == '+'){
    1556:	80 91 03 01 	lds	r24, 0x0103
    155a:	8b 32       	cpi	r24, 0x2B	; 43
    155c:	19 f4       	brne	.+6      	; 0x1564 <main+0x1e8>
			check_password();   /*first ask for the password*/
    155e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <check_password>
    1562:	06 c0       	rjmp	.+12     	; 0x1570 <main+0x1f4>

		}
		else if(g_key == '-'){
    1564:	80 91 03 01 	lds	r24, 0x0103
    1568:	8d 32       	cpi	r24, 0x2D	; 45
    156a:	11 f4       	brne	.+4      	; 0x1570 <main+0x1f4>
			check_password();    /*first ask for the password*/
    156c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <check_password>
		}
		LCD_clearScreen();
    1570:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_clearScreen>


		g_option = UART_recieveByte();   /*receive the action to be taken whether open door, change password or print error*/
    1574:	0e 94 5d 17 	call	0x2eba	; 0x2eba <UART_recieveByte>
    1578:	80 93 02 01 	sts	0x0102, r24
		if(g_option == 'D'){    /* secondly start timer and set the callback function */
    157c:	80 91 02 01 	lds	r24, 0x0102
    1580:	84 34       	cpi	r24, 0x44	; 68
    1582:	81 f4       	brne	.+32     	; 0x15a4 <main+0x228>

			Timer_init(&my_timer);
    1584:	ce 01       	movw	r24, r28
    1586:	0f 96       	adiw	r24, 0x0f	; 15
    1588:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Timer_init>
			Timer0_setCallBack(timer_function);
    158c:	83 ea       	ldi	r24, 0xA3	; 163
    158e:	95 e0       	ldi	r25, 0x05	; 5
    1590:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <Timer0_setCallBack>

			while(g_timer_flag==1);   /*polling for the timer to stop everything until timer finishes*/
    1594:	80 91 da 00 	lds	r24, 0x00DA
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	e1 f3       	breq	.-8      	; 0x1594 <main+0x218>
			g_timer_flag=1;   /*set the flag back again*/
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	80 93 da 00 	sts	0x00DA, r24
    15a2:	49 cf       	rjmp	.-366    	; 0x1436 <main+0xba>
		}
		else if(g_option == 'E'){  /* secondly start timer and set the callback function */
    15a4:	80 91 02 01 	lds	r24, 0x0102
    15a8:	85 34       	cpi	r24, 0x45	; 69
    15aa:	81 f4       	brne	.+32     	; 0x15cc <main+0x250>

			Timer0_setCallBack(timer_function2);
    15ac:	81 ef       	ldi	r24, 0xF1	; 241
    15ae:	95 e0       	ldi	r25, 0x05	; 5
    15b0:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <Timer0_setCallBack>
			Timer_init(&my_timer);
    15b4:	ce 01       	movw	r24, r28
    15b6:	0f 96       	adiw	r24, 0x0f	; 15
    15b8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <Timer_init>

			while(g_timer_flag==1);   /*polling for the timer to stop everything until timer finishes*/
    15bc:	80 91 da 00 	lds	r24, 0x00DA
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	e1 f3       	breq	.-8      	; 0x15bc <main+0x240>
			g_timer_flag=1;           /*set the flag back again*/
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	80 93 da 00 	sts	0x00DA, r24
    15ca:	35 cf       	rjmp	.-406    	; 0x1436 <main+0xba>
		}
		else if(g_option == 'C'){
    15cc:	80 91 02 01 	lds	r24, 0x0102
    15d0:	83 34       	cpi	r24, 0x43	; 67
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <main+0x25a>
    15d4:	30 cf       	rjmp	.-416    	; 0x1436 <main+0xba>
			do{

				setting_password();    /*create new password*/
    15d6:	0e 94 21 06 	call	0xc42	; 0xc42 <setting_password>
			}while(flag == 0x31);
    15da:	80 91 f8 00 	lds	r24, 0x00F8
    15de:	81 33       	cpi	r24, 0x31	; 49
    15e0:	d1 f3       	breq	.-12     	; 0x15d6 <main+0x25a>
    15e2:	29 cf       	rjmp	.-430    	; 0x1436 <main+0xba>

000015e4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <GPIO_setupPinDirection+0x6>
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <GPIO_setupPinDirection+0x8>
    15ec:	0f 92       	push	r0
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	6a 83       	std	Y+2, r22	; 0x02
    15f6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	88 30       	cpi	r24, 0x08	; 8
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <GPIO_setupPinDirection+0x1c>
    15fe:	d5 c0       	rjmp	.+426    	; 0x17aa <GPIO_setupPinDirection+0x1c6>
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	84 30       	cpi	r24, 0x04	; 4
    1604:	08 f0       	brcs	.+2      	; 0x1608 <GPIO_setupPinDirection+0x24>
    1606:	d1 c0       	rjmp	.+418    	; 0x17aa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3d 83       	std	Y+5, r19	; 0x05
    1610:	2c 83       	std	Y+4, r18	; 0x04
    1612:	8c 81       	ldd	r24, Y+4	; 0x04
    1614:	9d 81       	ldd	r25, Y+5	; 0x05
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	09 f4       	brne	.+2      	; 0x161e <GPIO_setupPinDirection+0x3a>
    161c:	43 c0       	rjmp	.+134    	; 0x16a4 <GPIO_setupPinDirection+0xc0>
    161e:	2c 81       	ldd	r18, Y+4	; 0x04
    1620:	3d 81       	ldd	r19, Y+5	; 0x05
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	2c f4       	brge	.+10     	; 0x1632 <GPIO_setupPinDirection+0x4e>
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	9d 81       	ldd	r25, Y+5	; 0x05
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	71 f0       	breq	.+28     	; 0x164c <GPIO_setupPinDirection+0x68>
    1630:	bc c0       	rjmp	.+376    	; 0x17aa <GPIO_setupPinDirection+0x1c6>
    1632:	2c 81       	ldd	r18, Y+4	; 0x04
    1634:	3d 81       	ldd	r19, Y+5	; 0x05
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	09 f4       	brne	.+2      	; 0x163e <GPIO_setupPinDirection+0x5a>
    163c:	5f c0       	rjmp	.+190    	; 0x16fc <GPIO_setupPinDirection+0x118>
    163e:	8c 81       	ldd	r24, Y+4	; 0x04
    1640:	9d 81       	ldd	r25, Y+5	; 0x05
    1642:	83 30       	cpi	r24, 0x03	; 3
    1644:	91 05       	cpc	r25, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <GPIO_setupPinDirection+0x66>
    1648:	85 c0       	rjmp	.+266    	; 0x1754 <GPIO_setupPinDirection+0x170>
    164a:	af c0       	rjmp	.+350    	; 0x17aa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	a1 f4       	brne	.+40     	; 0x167a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1652:	aa e3       	ldi	r26, 0x3A	; 58
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ea e3       	ldi	r30, 0x3A	; 58
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_setupPinDirection+0x8c>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_setupPinDirection+0x88>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	98 c0       	rjmp	.+304    	; 0x17aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    167a:	aa e3       	ldi	r26, 0x3A	; 58
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ea e3       	ldi	r30, 0x3A	; 58
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GPIO_setupPinDirection+0xb4>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <GPIO_setupPinDirection+0xb0>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	83 c0       	rjmp	.+262    	; 0x17aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	a1 f4       	brne	.+40     	; 0x16d2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16aa:	a7 e3       	ldi	r26, 0x37	; 55
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e7 e3       	ldi	r30, 0x37	; 55
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_setupPinDirection+0xe4>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_setupPinDirection+0xe0>
    16cc:	84 2b       	or	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	6c c0       	rjmp	.+216    	; 0x17aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16d2:	a7 e3       	ldi	r26, 0x37	; 55
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e7 e3       	ldi	r30, 0x37	; 55
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <GPIO_setupPinDirection+0x10c>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <GPIO_setupPinDirection+0x108>
    16f4:	80 95       	com	r24
    16f6:	84 23       	and	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	57 c0       	rjmp	.+174    	; 0x17aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	a1 f4       	brne	.+40     	; 0x172a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1702:	a4 e3       	ldi	r26, 0x34	; 52
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e4 e3       	ldi	r30, 0x34	; 52
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_setupPinDirection+0x13c>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_setupPinDirection+0x138>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	40 c0       	rjmp	.+128    	; 0x17aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    172a:	a4 e3       	ldi	r26, 0x34	; 52
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e4 e3       	ldi	r30, 0x34	; 52
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <GPIO_setupPinDirection+0x164>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <GPIO_setupPinDirection+0x160>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	2b c0       	rjmp	.+86     	; 0x17aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	a1 f4       	brne	.+40     	; 0x1782 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    175a:	a1 e3       	ldi	r26, 0x31	; 49
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e1 e3       	ldi	r30, 0x31	; 49
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <GPIO_setupPinDirection+0x194>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <GPIO_setupPinDirection+0x190>
    177c:	84 2b       	or	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	14 c0       	rjmp	.+40     	; 0x17aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1782:	a1 e3       	ldi	r26, 0x31	; 49
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e1 e3       	ldi	r30, 0x31	; 49
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <GPIO_setupPinDirection+0x1bc>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <GPIO_setupPinDirection+0x1b8>
    17a4:	80 95       	com	r24
    17a6:	84 23       	and	r24, r20
    17a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <GPIO_writePin+0x6>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <GPIO_writePin+0x8>
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	6a 83       	std	Y+2, r22	; 0x02
    17cc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	88 30       	cpi	r24, 0x08	; 8
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <GPIO_writePin+0x1c>
    17d4:	d5 c0       	rjmp	.+426    	; 0x1980 <GPIO_writePin+0x1c6>
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	84 30       	cpi	r24, 0x04	; 4
    17da:	08 f0       	brcs	.+2      	; 0x17de <GPIO_writePin+0x24>
    17dc:	d1 c0       	rjmp	.+418    	; 0x1980 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3d 83       	std	Y+5, r19	; 0x05
    17e6:	2c 83       	std	Y+4, r18	; 0x04
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	91 05       	cpc	r25, r1
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <GPIO_writePin+0x3a>
    17f2:	43 c0       	rjmp	.+134    	; 0x187a <GPIO_writePin+0xc0>
    17f4:	2c 81       	ldd	r18, Y+4	; 0x04
    17f6:	3d 81       	ldd	r19, Y+5	; 0x05
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	2c f4       	brge	.+10     	; 0x1808 <GPIO_writePin+0x4e>
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	71 f0       	breq	.+28     	; 0x1822 <GPIO_writePin+0x68>
    1806:	bc c0       	rjmp	.+376    	; 0x1980 <GPIO_writePin+0x1c6>
    1808:	2c 81       	ldd	r18, Y+4	; 0x04
    180a:	3d 81       	ldd	r19, Y+5	; 0x05
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	09 f4       	brne	.+2      	; 0x1814 <GPIO_writePin+0x5a>
    1812:	5f c0       	rjmp	.+190    	; 0x18d2 <GPIO_writePin+0x118>
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	83 30       	cpi	r24, 0x03	; 3
    181a:	91 05       	cpc	r25, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <GPIO_writePin+0x66>
    181e:	85 c0       	rjmp	.+266    	; 0x192a <GPIO_writePin+0x170>
    1820:	af c0       	rjmp	.+350    	; 0x1980 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	a1 f4       	brne	.+40     	; 0x1850 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1828:	ab e3       	ldi	r26, 0x3B	; 59
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	eb e3       	ldi	r30, 0x3B	; 59
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <GPIO_writePin+0x8c>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <GPIO_writePin+0x88>
    184a:	84 2b       	or	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	98 c0       	rjmp	.+304    	; 0x1980 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1850:	ab e3       	ldi	r26, 0x3B	; 59
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	eb e3       	ldi	r30, 0x3B	; 59
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GPIO_writePin+0xb4>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <GPIO_writePin+0xb0>
    1872:	80 95       	com	r24
    1874:	84 23       	and	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	83 c0       	rjmp	.+262    	; 0x1980 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1880:	a8 e3       	ldi	r26, 0x38	; 56
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e8 e3       	ldi	r30, 0x38	; 56
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_writePin+0xe4>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_writePin+0xe0>
    18a2:	84 2b       	or	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	6c c0       	rjmp	.+216    	; 0x1980 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18a8:	a8 e3       	ldi	r26, 0x38	; 56
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e8 e3       	ldi	r30, 0x38	; 56
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_writePin+0x10c>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_writePin+0x108>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	57 c0       	rjmp	.+174    	; 0x1980 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	a1 f4       	brne	.+40     	; 0x1900 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18d8:	a5 e3       	ldi	r26, 0x35	; 53
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e5 e3       	ldi	r30, 0x35	; 53
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_writePin+0x13c>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_writePin+0x138>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	40 c0       	rjmp	.+128    	; 0x1980 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1900:	a5 e3       	ldi	r26, 0x35	; 53
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e5 e3       	ldi	r30, 0x35	; 53
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_writePin+0x164>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_writePin+0x160>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	2b c0       	rjmp	.+86     	; 0x1980 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	a1 f4       	brne	.+40     	; 0x1958 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1930:	a2 e3       	ldi	r26, 0x32	; 50
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e2 e3       	ldi	r30, 0x32	; 50
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <GPIO_writePin+0x194>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <GPIO_writePin+0x190>
    1952:	84 2b       	or	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1958:	a2 e3       	ldi	r26, 0x32	; 50
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e2 e3       	ldi	r30, 0x32	; 50
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <GPIO_writePin+0x1bc>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <GPIO_writePin+0x1b8>
    197a:	80 95       	com	r24
    197c:	84 23       	and	r24, r20
    197e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <GPIO_readPin+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <GPIO_readPin+0x8>
    1998:	0f 92       	push	r0
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	8a 83       	std	Y+2, r24	; 0x02
    19a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19a2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	88 30       	cpi	r24, 0x08	; 8
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <GPIO_readPin+0x1c>
    19aa:	84 c0       	rjmp	.+264    	; 0x1ab4 <GPIO_readPin+0x124>
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	84 30       	cpi	r24, 0x04	; 4
    19b0:	08 f0       	brcs	.+2      	; 0x19b4 <GPIO_readPin+0x24>
    19b2:	80 c0       	rjmp	.+256    	; 0x1ab4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3d 83       	std	Y+5, r19	; 0x05
    19bc:	2c 83       	std	Y+4, r18	; 0x04
    19be:	4c 81       	ldd	r20, Y+4	; 0x04
    19c0:	5d 81       	ldd	r21, Y+5	; 0x05
    19c2:	41 30       	cpi	r20, 0x01	; 1
    19c4:	51 05       	cpc	r21, r1
    19c6:	79 f1       	breq	.+94     	; 0x1a26 <GPIO_readPin+0x96>
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	9d 81       	ldd	r25, Y+5	; 0x05
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	91 05       	cpc	r25, r1
    19d0:	34 f4       	brge	.+12     	; 0x19de <GPIO_readPin+0x4e>
    19d2:	2c 81       	ldd	r18, Y+4	; 0x04
    19d4:	3d 81       	ldd	r19, Y+5	; 0x05
    19d6:	21 15       	cp	r18, r1
    19d8:	31 05       	cpc	r19, r1
    19da:	69 f0       	breq	.+26     	; 0x19f6 <GPIO_readPin+0x66>
    19dc:	6b c0       	rjmp	.+214    	; 0x1ab4 <GPIO_readPin+0x124>
    19de:	4c 81       	ldd	r20, Y+4	; 0x04
    19e0:	5d 81       	ldd	r21, Y+5	; 0x05
    19e2:	42 30       	cpi	r20, 0x02	; 2
    19e4:	51 05       	cpc	r21, r1
    19e6:	b9 f1       	breq	.+110    	; 0x1a56 <GPIO_readPin+0xc6>
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	9d 81       	ldd	r25, Y+5	; 0x05
    19ec:	83 30       	cpi	r24, 0x03	; 3
    19ee:	91 05       	cpc	r25, r1
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <GPIO_readPin+0x64>
    19f2:	49 c0       	rjmp	.+146    	; 0x1a86 <GPIO_readPin+0xf6>
    19f4:	5f c0       	rjmp	.+190    	; 0x1ab4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19f6:	e9 e3       	ldi	r30, 0x39	; 57
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a9 01       	movw	r20, r18
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <GPIO_readPin+0x7e>
    1a0a:	55 95       	asr	r21
    1a0c:	47 95       	ror	r20
    1a0e:	8a 95       	dec	r24
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <GPIO_readPin+0x7a>
    1a12:	ca 01       	movw	r24, r20
    1a14:	81 70       	andi	r24, 0x01	; 1
    1a16:	90 70       	andi	r25, 0x00	; 0
    1a18:	88 23       	and	r24, r24
    1a1a:	19 f0       	breq	.+6      	; 0x1a22 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	49 c0       	rjmp	.+146    	; 0x1ab4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a22:	19 82       	std	Y+1, r1	; 0x01
    1a24:	47 c0       	rjmp	.+142    	; 0x1ab4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a26:	e6 e3       	ldi	r30, 0x36	; 54
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a9 01       	movw	r20, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <GPIO_readPin+0xae>
    1a3a:	55 95       	asr	r21
    1a3c:	47 95       	ror	r20
    1a3e:	8a 95       	dec	r24
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <GPIO_readPin+0xaa>
    1a42:	ca 01       	movw	r24, r20
    1a44:	81 70       	andi	r24, 0x01	; 1
    1a46:	90 70       	andi	r25, 0x00	; 0
    1a48:	88 23       	and	r24, r24
    1a4a:	19 f0       	breq	.+6      	; 0x1a52 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	31 c0       	rjmp	.+98     	; 0x1ab4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a52:	19 82       	std	Y+1, r1	; 0x01
    1a54:	2f c0       	rjmp	.+94     	; 0x1ab4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a56:	e3 e3       	ldi	r30, 0x33	; 51
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a9 01       	movw	r20, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <GPIO_readPin+0xde>
    1a6a:	55 95       	asr	r21
    1a6c:	47 95       	ror	r20
    1a6e:	8a 95       	dec	r24
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <GPIO_readPin+0xda>
    1a72:	ca 01       	movw	r24, r20
    1a74:	81 70       	andi	r24, 0x01	; 1
    1a76:	90 70       	andi	r25, 0x00	; 0
    1a78:	88 23       	and	r24, r24
    1a7a:	19 f0       	breq	.+6      	; 0x1a82 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	19 c0       	rjmp	.+50     	; 0x1ab4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a82:	19 82       	std	Y+1, r1	; 0x01
    1a84:	17 c0       	rjmp	.+46     	; 0x1ab4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a86:	e0 e3       	ldi	r30, 0x30	; 48
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a9 01       	movw	r20, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <GPIO_readPin+0x10e>
    1a9a:	55 95       	asr	r21
    1a9c:	47 95       	ror	r20
    1a9e:	8a 95       	dec	r24
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <GPIO_readPin+0x10a>
    1aa2:	ca 01       	movw	r24, r20
    1aa4:	81 70       	andi	r24, 0x01	; 1
    1aa6:	90 70       	andi	r25, 0x00	; 0
    1aa8:	88 23       	and	r24, r24
    1aaa:	19 f0       	breq	.+6      	; 0x1ab2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ab2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <GPIO_setupPortDirection+0x6>
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <GPIO_setupPortDirection+0x8>
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	84 30       	cpi	r24, 0x04	; 4
    1ada:	90 f5       	brcc	.+100    	; 0x1b40 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3c 83       	std	Y+4, r19	; 0x04
    1ae4:	2b 83       	std	Y+3, r18	; 0x03
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	91 05       	cpc	r25, r1
    1aee:	d1 f0       	breq	.+52     	; 0x1b24 <GPIO_setupPortDirection+0x5e>
    1af0:	2b 81       	ldd	r18, Y+3	; 0x03
    1af2:	3c 81       	ldd	r19, Y+4	; 0x04
    1af4:	22 30       	cpi	r18, 0x02	; 2
    1af6:	31 05       	cpc	r19, r1
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <GPIO_setupPortDirection+0x3e>
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	61 f0       	breq	.+24     	; 0x1b1a <GPIO_setupPortDirection+0x54>
    1b02:	1e c0       	rjmp	.+60     	; 0x1b40 <GPIO_setupPortDirection+0x7a>
    1b04:	2b 81       	ldd	r18, Y+3	; 0x03
    1b06:	3c 81       	ldd	r19, Y+4	; 0x04
    1b08:	22 30       	cpi	r18, 0x02	; 2
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	81 f0       	breq	.+32     	; 0x1b2e <GPIO_setupPortDirection+0x68>
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	91 05       	cpc	r25, r1
    1b16:	81 f0       	breq	.+32     	; 0x1b38 <GPIO_setupPortDirection+0x72>
    1b18:	13 c0       	rjmp	.+38     	; 0x1b40 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b1a:	ea e3       	ldi	r30, 0x3A	; 58
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	80 83       	st	Z, r24
    1b22:	0e c0       	rjmp	.+28     	; 0x1b40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b24:	e7 e3       	ldi	r30, 0x37	; 55
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	80 83       	st	Z, r24
    1b2c:	09 c0       	rjmp	.+18     	; 0x1b40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b2e:	e4 e3       	ldi	r30, 0x34	; 52
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	80 83       	st	Z, r24
    1b36:	04 c0       	rjmp	.+8      	; 0x1b40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b38:	e1 e3       	ldi	r30, 0x31	; 49
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <GPIO_writePort+0x6>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <GPIO_writePort+0x8>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	84 30       	cpi	r24, 0x04	; 4
    1b62:	90 f5       	brcc	.+100    	; 0x1bc8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	3c 83       	std	Y+4, r19	; 0x04
    1b6c:	2b 83       	std	Y+3, r18	; 0x03
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	91 05       	cpc	r25, r1
    1b76:	d1 f0       	breq	.+52     	; 0x1bac <GPIO_writePort+0x5e>
    1b78:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7c:	22 30       	cpi	r18, 0x02	; 2
    1b7e:	31 05       	cpc	r19, r1
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <GPIO_writePort+0x3e>
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	61 f0       	breq	.+24     	; 0x1ba2 <GPIO_writePort+0x54>
    1b8a:	1e c0       	rjmp	.+60     	; 0x1bc8 <GPIO_writePort+0x7a>
    1b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	31 05       	cpc	r19, r1
    1b94:	81 f0       	breq	.+32     	; 0x1bb6 <GPIO_writePort+0x68>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	83 30       	cpi	r24, 0x03	; 3
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	81 f0       	breq	.+32     	; 0x1bc0 <GPIO_writePort+0x72>
    1ba0:	13 c0       	rjmp	.+38     	; 0x1bc8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ba2:	eb e3       	ldi	r30, 0x3B	; 59
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	80 83       	st	Z, r24
    1baa:	0e c0       	rjmp	.+28     	; 0x1bc8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1bac:	e8 e3       	ldi	r30, 0x38	; 56
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	80 83       	st	Z, r24
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1bb6:	e5 e3       	ldi	r30, 0x35	; 53
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	80 83       	st	Z, r24
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1bc0:	e2 e3       	ldi	r30, 0x32	; 50
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <GPIO_readPort+0x6>
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <GPIO_readPort+0x8>
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1be4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	84 30       	cpi	r24, 0x04	; 4
    1bea:	90 f5       	brcc	.+100    	; 0x1c50 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	3c 83       	std	Y+4, r19	; 0x04
    1bf4:	2b 83       	std	Y+3, r18	; 0x03
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	d1 f0       	breq	.+52     	; 0x1c34 <GPIO_readPort+0x5e>
    1c00:	2b 81       	ldd	r18, Y+3	; 0x03
    1c02:	3c 81       	ldd	r19, Y+4	; 0x04
    1c04:	22 30       	cpi	r18, 0x02	; 2
    1c06:	31 05       	cpc	r19, r1
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <GPIO_readPort+0x3e>
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	61 f0       	breq	.+24     	; 0x1c2a <GPIO_readPort+0x54>
    1c12:	1e c0       	rjmp	.+60     	; 0x1c50 <GPIO_readPort+0x7a>
    1c14:	2b 81       	ldd	r18, Y+3	; 0x03
    1c16:	3c 81       	ldd	r19, Y+4	; 0x04
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	81 f0       	breq	.+32     	; 0x1c3e <GPIO_readPort+0x68>
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	83 30       	cpi	r24, 0x03	; 3
    1c24:	91 05       	cpc	r25, r1
    1c26:	81 f0       	breq	.+32     	; 0x1c48 <GPIO_readPort+0x72>
    1c28:	13 c0       	rjmp	.+38     	; 0x1c50 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c2a:	e9 e3       	ldi	r30, 0x39	; 57
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	0e c0       	rjmp	.+28     	; 0x1c50 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c34:	e6 e3       	ldi	r30, 0x36	; 54
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	09 c0       	rjmp	.+18     	; 0x1c50 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c3e:	e3 e3       	ldi	r30, 0x33	; 51
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	04 c0       	rjmp	.+8      	; 0x1c50 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c48:	e0 e3       	ldi	r30, 0x30	; 48
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <KEYPAD_getPressedKey+0x6>
    1c66:	0f 92       	push	r0
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1c6c:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1c6e:	1b 82       	std	Y+3, r1	; 0x03
    1c70:	43 c0       	rjmp	.+134    	; 0x1cf8 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	98 2f       	mov	r25, r24
    1c7e:	9c 5f       	subi	r25, 0xFC	; 252
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	69 2f       	mov	r22, r25
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9c 01       	movw	r18, r24
    1c92:	2c 5f       	subi	r18, 0xFC	; 252
    1c94:	3f 4f       	sbci	r19, 0xFF	; 255
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <KEYPAD_getPressedKey+0x40>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	2a 95       	dec	r18
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <KEYPAD_getPressedKey+0x3c>
    1ca4:	80 95       	com	r24
    1ca6:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	69 81       	ldd	r22, Y+1	; 0x01
    1cac:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1cb0:	1a 82       	std	Y+2, r1	; 0x02
    1cb2:	1c c0       	rjmp	.+56     	; 0x1cec <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	6a 81       	ldd	r22, Y+2	; 0x02
    1cb8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_readPin>
    1cbc:	88 23       	and	r24, r24
    1cbe:	99 f4       	brne	.+38     	; 0x1ce6 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	98 2f       	mov	r25, r24
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	89 0f       	add	r24, r25
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	8f 5f       	subi	r24, 0xFF	; 255
    1cea:	8a 83       	std	Y+2, r24	; 0x02
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	84 30       	cpi	r24, 0x04	; 4
    1cf0:	08 f3       	brcs	.-62     	; 0x1cb4 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	8f 5f       	subi	r24, 0xFF	; 255
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	84 30       	cpi	r24, 0x04	; 4
    1cfc:	08 f4       	brcc	.+2      	; 0x1d00 <KEYPAD_getPressedKey+0xa0>
    1cfe:	b9 cf       	rjmp	.-142    	; 0x1c72 <KEYPAD_getPressedKey+0x12>
    1d00:	b6 cf       	rjmp	.-148    	; 0x1c6e <KEYPAD_getPressedKey+0xe>

00001d02 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d10:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	3c 83       	std	Y+4, r19	; 0x04
    1d1a:	2b 83       	std	Y+3, r18	; 0x03
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	88 30       	cpi	r24, 0x08	; 8
    1d22:	91 05       	cpc	r25, r1
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d26:	70 c0       	rjmp	.+224    	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d28:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2c:	29 30       	cpi	r18, 0x09	; 9
    1d2e:	31 05       	cpc	r19, r1
    1d30:	5c f5       	brge	.+86     	; 0x1d88 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	91 05       	cpc	r25, r1
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d3c:	59 c0       	rjmp	.+178    	; 0x1df0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d40:	3c 81       	ldd	r19, Y+4	; 0x04
    1d42:	25 30       	cpi	r18, 0x05	; 5
    1d44:	31 05       	cpc	r19, r1
    1d46:	9c f4       	brge	.+38     	; 0x1d6e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	82 30       	cpi	r24, 0x02	; 2
    1d4e:	91 05       	cpc	r25, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d52:	48 c0       	rjmp	.+144    	; 0x1de4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d54:	2b 81       	ldd	r18, Y+3	; 0x03
    1d56:	3c 81       	ldd	r19, Y+4	; 0x04
    1d58:	23 30       	cpi	r18, 0x03	; 3
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	0c f0       	brlt	.+2      	; 0x1d60 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d5e:	45 c0       	rjmp	.+138    	; 0x1dea <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	91 05       	cpc	r25, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d6a:	39 c0       	rjmp	.+114    	; 0x1dde <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d6c:	67 c0       	rjmp	.+206    	; 0x1e3c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d70:	3c 81       	ldd	r19, Y+4	; 0x04
    1d72:	26 30       	cpi	r18, 0x06	; 6
    1d74:	31 05       	cpc	r19, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d78:	41 c0       	rjmp	.+130    	; 0x1dfc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	87 30       	cpi	r24, 0x07	; 7
    1d80:	91 05       	cpc	r25, r1
    1d82:	0c f0       	brlt	.+2      	; 0x1d86 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d84:	3e c0       	rjmp	.+124    	; 0x1e02 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d86:	37 c0       	rjmp	.+110    	; 0x1df6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d88:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8c:	2c 30       	cpi	r18, 0x0C	; 12
    1d8e:	31 05       	cpc	r19, r1
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d92:	46 c0       	rjmp	.+140    	; 0x1e20 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	8d 30       	cpi	r24, 0x0D	; 13
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	5c f4       	brge	.+22     	; 0x1db4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1d9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1da0:	3c 81       	ldd	r19, Y+4	; 0x04
    1da2:	2a 30       	cpi	r18, 0x0A	; 10
    1da4:	31 05       	cpc	r19, r1
    1da6:	b1 f1       	breq	.+108    	; 0x1e14 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	8b 30       	cpi	r24, 0x0B	; 11
    1dae:	91 05       	cpc	r25, r1
    1db0:	a4 f5       	brge	.+104    	; 0x1e1a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1db2:	2d c0       	rjmp	.+90     	; 0x1e0e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1db4:	2b 81       	ldd	r18, Y+3	; 0x03
    1db6:	3c 81       	ldd	r19, Y+4	; 0x04
    1db8:	2e 30       	cpi	r18, 0x0E	; 14
    1dba:	31 05       	cpc	r19, r1
    1dbc:	b9 f1       	breq	.+110    	; 0x1e2c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	8e 30       	cpi	r24, 0x0E	; 14
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	7c f1       	brlt	.+94     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dca:	3c 81       	ldd	r19, Y+4	; 0x04
    1dcc:	2f 30       	cpi	r18, 0x0F	; 15
    1dce:	31 05       	cpc	r19, r1
    1dd0:	79 f1       	breq	.+94     	; 0x1e30 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	80 31       	cpi	r24, 0x10	; 16
    1dd8:	91 05       	cpc	r25, r1
    1dda:	69 f1       	breq	.+90     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1ddc:	2f c0       	rjmp	.+94     	; 0x1e3c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1dde:	87 e0       	ldi	r24, 0x07	; 7
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	2e c0       	rjmp	.+92     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1de4:	88 e0       	ldi	r24, 0x08	; 8
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	2b c0       	rjmp	.+86     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1dea:	89 e0       	ldi	r24, 0x09	; 9
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	28 c0       	rjmp	.+80     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1df0:	85 e2       	ldi	r24, 0x25	; 37
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	25 c0       	rjmp	.+74     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1df6:	84 e0       	ldi	r24, 0x04	; 4
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	22 c0       	rjmp	.+68     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1dfc:	85 e0       	ldi	r24, 0x05	; 5
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	1f c0       	rjmp	.+62     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e02:	86 e0       	ldi	r24, 0x06	; 6
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	1c c0       	rjmp	.+56     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e08:	8a e2       	ldi	r24, 0x2A	; 42
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	19 c0       	rjmp	.+50     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	16 c0       	rjmp	.+44     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	13 c0       	rjmp	.+38     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	10 c0       	rjmp	.+32     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e20:	8d e2       	ldi	r24, 0x2D	; 45
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	0d c0       	rjmp	.+26     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e26:	8d e0       	ldi	r24, 0x0D	; 13
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	0a c0       	rjmp	.+20     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e2c:	19 82       	std	Y+1, r1	; 0x01
    1e2e:	08 c0       	rjmp	.+16     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e30:	8d e3       	ldi	r24, 0x3D	; 61
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	05 c0       	rjmp	.+10     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e36:	8b e2       	ldi	r24, 0x2B	; 43
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	61 e0       	ldi	r22, 0x01	; 1
    1e66:	41 e0       	ldi	r20, 0x01	; 1
    1e68:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	62 e0       	ldi	r22, 0x02	; 2
    1e70:	41 e0       	ldi	r20, 0x01	; 1
    1e72:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	6f ef       	ldi	r22, 0xFF	; 255
    1e7a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1e7e:	88 e3       	ldi	r24, 0x38	; 56
    1e80:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e84:	8c e0       	ldi	r24, 0x0C	; 12
    1e86:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_sendCommand>
}
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	ea 97       	sbiw	r28, 0x3a	; 58
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1eac:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_writePin>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	a0 e8       	ldi	r26, 0x80	; 128
    1ec8:	bf e3       	ldi	r27, 0x3F	; 63
    1eca:	8d ab       	std	Y+53, r24	; 0x35
    1ecc:	9e ab       	std	Y+54, r25	; 0x36
    1ece:	af ab       	std	Y+55, r26	; 0x37
    1ed0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ed8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	4a e7       	ldi	r20, 0x7A	; 122
    1ee0:	53 e4       	ldi	r21, 0x43	; 67
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	89 ab       	std	Y+49, r24	; 0x31
    1eec:	9a ab       	std	Y+50, r25	; 0x32
    1eee:	ab ab       	std	Y+51, r26	; 0x33
    1ef0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ef2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef8:	9c a9       	ldd	r25, Y+52	; 0x34
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e8       	ldi	r20, 0x80	; 128
    1f00:	5f e3       	ldi	r21, 0x3F	; 63
    1f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	98 ab       	std	Y+48, r25	; 0x30
    1f10:	8f a7       	std	Y+47, r24	; 0x2f
    1f12:	3f c0       	rjmp	.+126    	; 0x1f92 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1f14:	69 a9       	ldd	r22, Y+49	; 0x31
    1f16:	7a a9       	ldd	r23, Y+50	; 0x32
    1f18:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	57 e4       	ldi	r21, 0x47	; 71
    1f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	4c f5       	brge	.+82     	; 0x1f7e <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f30:	8f a9       	ldd	r24, Y+55	; 0x37
    1f32:	98 ad       	ldd	r25, Y+56	; 0x38
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	98 ab       	std	Y+48, r25	; 0x30
    1f52:	8f a7       	std	Y+47, r24	; 0x2f
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <LCD_sendCommand+0xde>
    1f56:	89 e1       	ldi	r24, 0x19	; 25
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9e a7       	std	Y+46, r25	; 0x2e
    1f5c:	8d a7       	std	Y+45, r24	; 0x2d
    1f5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f60:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_sendCommand+0xcc>
    1f66:	9e a7       	std	Y+46, r25	; 0x2e
    1f68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	98 ab       	std	Y+48, r25	; 0x30
    1f72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f76:	98 a9       	ldd	r25, Y+48	; 0x30
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <LCD_sendCommand+0xc0>
    1f7c:	14 c0       	rjmp	.+40     	; 0x1fa6 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f80:	7a a9       	ldd	r23, Y+50	; 0x32
    1f82:	8b a9       	ldd	r24, Y+51	; 0x33
    1f84:	9c a9       	ldd	r25, Y+52	; 0x34
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	98 ab       	std	Y+48, r25	; 0x30
    1f90:	8f a7       	std	Y+47, r24	; 0x2f
    1f92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f94:	98 a9       	ldd	r25, Y+48	; 0x30
    1f96:	9c a7       	std	Y+44, r25	; 0x2c
    1f98:	8b a7       	std	Y+43, r24	; 0x2b
    1f9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_sendCommand+0x108>
    1fa2:	9c a7       	std	Y+44, r25	; 0x2c
    1fa4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	62 e0       	ldi	r22, 0x02	; 2
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_writePin>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a0 e8       	ldi	r26, 0x80	; 128
    1fb6:	bf e3       	ldi	r27, 0x3F	; 63
    1fb8:	8f a3       	std	Y+39, r24	; 0x27
    1fba:	98 a7       	std	Y+40, r25	; 0x28
    1fbc:	a9 a7       	std	Y+41, r26	; 0x29
    1fbe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a e7       	ldi	r20, 0x7A	; 122
    1fce:	53 e4       	ldi	r21, 0x43	; 67
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8b a3       	std	Y+35, r24	; 0x23
    1fda:	9c a3       	std	Y+36, r25	; 0x24
    1fdc:	ad a3       	std	Y+37, r26	; 0x25
    1fde:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9a a3       	std	Y+34, r25	; 0x22
    1ffe:	89 a3       	std	Y+33, r24	; 0x21
    2000:	3f c0       	rjmp	.+126    	; 0x2080 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2002:	6b a1       	ldd	r22, Y+35	; 0x23
    2004:	7c a1       	ldd	r23, Y+36	; 0x24
    2006:	8d a1       	ldd	r24, Y+37	; 0x25
    2008:	9e a1       	ldd	r25, Y+38	; 0x26
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	3f ef       	ldi	r19, 0xFF	; 255
    200e:	4f e7       	ldi	r20, 0x7F	; 127
    2010:	57 e4       	ldi	r21, 0x47	; 71
    2012:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2016:	18 16       	cp	r1, r24
    2018:	4c f5       	brge	.+82     	; 0x206c <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	6f a1       	ldd	r22, Y+39	; 0x27
    201c:	78 a5       	ldd	r23, Y+40	; 0x28
    201e:	89 a5       	ldd	r24, Y+41	; 0x29
    2020:	9a a5       	ldd	r25, Y+42	; 0x2a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9a a3       	std	Y+34, r25	; 0x22
    2040:	89 a3       	std	Y+33, r24	; 0x21
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <LCD_sendCommand+0x1cc>
    2044:	89 e1       	ldi	r24, 0x19	; 25
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	98 a3       	std	Y+32, r25	; 0x20
    204a:	8f 8f       	std	Y+31, r24	; 0x1f
    204c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    204e:	98 a1       	ldd	r25, Y+32	; 0x20
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_sendCommand+0x1ba>
    2054:	98 a3       	std	Y+32, r25	; 0x20
    2056:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	89 a1       	ldd	r24, Y+33	; 0x21
    205a:	9a a1       	ldd	r25, Y+34	; 0x22
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9a a3       	std	Y+34, r25	; 0x22
    2060:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	89 a1       	ldd	r24, Y+33	; 0x21
    2064:	9a a1       	ldd	r25, Y+34	; 0x22
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	69 f7       	brne	.-38     	; 0x2044 <LCD_sendCommand+0x1ae>
    206a:	14 c0       	rjmp	.+40     	; 0x2094 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	6b a1       	ldd	r22, Y+35	; 0x23
    206e:	7c a1       	ldd	r23, Y+36	; 0x24
    2070:	8d a1       	ldd	r24, Y+37	; 0x25
    2072:	9e a1       	ldd	r25, Y+38	; 0x26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9a a3       	std	Y+34, r25	; 0x22
    207e:	89 a3       	std	Y+33, r24	; 0x21
    2080:	89 a1       	ldd	r24, Y+33	; 0x21
    2082:	9a a1       	ldd	r25, Y+34	; 0x22
    2084:	9e 8f       	std	Y+30, r25	; 0x1e
    2086:	8d 8f       	std	Y+29, r24	; 0x1d
    2088:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_sendCommand+0x1f6>
    2090:	9e 8f       	std	Y+30, r25	; 0x1e
    2092:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	6a ad       	ldd	r22, Y+58	; 0x3a
    2098:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GPIO_writePort>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a0 e8       	ldi	r26, 0x80	; 128
    20a2:	bf e3       	ldi	r27, 0x3F	; 63
    20a4:	89 8f       	std	Y+25, r24	; 0x19
    20a6:	9a 8f       	std	Y+26, r25	; 0x1a
    20a8:	ab 8f       	std	Y+27, r26	; 0x1b
    20aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	69 8d       	ldd	r22, Y+25	; 0x19
    20ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a e7       	ldi	r20, 0x7A	; 122
    20ba:	53 e4       	ldi	r21, 0x43	; 67
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8d 8b       	std	Y+21, r24	; 0x15
    20c6:	9e 8b       	std	Y+22, r25	; 0x16
    20c8:	af 8b       	std	Y+23, r26	; 0x17
    20ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20cc:	6d 89       	ldd	r22, Y+21	; 0x15
    20ce:	7e 89       	ldd	r23, Y+22	; 0x16
    20d0:	8f 89       	ldd	r24, Y+23	; 0x17
    20d2:	98 8d       	ldd	r25, Y+24	; 0x18
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <LCD_sendCommand+0x258>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9c 8b       	std	Y+20, r25	; 0x14
    20ea:	8b 8b       	std	Y+19, r24	; 0x13
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    20ee:	6d 89       	ldd	r22, Y+21	; 0x15
    20f0:	7e 89       	ldd	r23, Y+22	; 0x16
    20f2:	8f 89       	ldd	r24, Y+23	; 0x17
    20f4:	98 8d       	ldd	r25, Y+24	; 0x18
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	69 8d       	ldd	r22, Y+25	; 0x19
    2108:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9c 8b       	std	Y+20, r25	; 0x14
    212c:	8b 8b       	std	Y+19, r24	; 0x13
    212e:	0f c0       	rjmp	.+30     	; 0x214e <LCD_sendCommand+0x2b8>
    2130:	89 e1       	ldi	r24, 0x19	; 25
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9a 8b       	std	Y+18, r25	; 0x12
    2136:	89 8b       	std	Y+17, r24	; 0x11
    2138:	89 89       	ldd	r24, Y+17	; 0x11
    213a:	9a 89       	ldd	r25, Y+18	; 0x12
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <LCD_sendCommand+0x2a6>
    2140:	9a 8b       	std	Y+18, r25	; 0x12
    2142:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	8b 89       	ldd	r24, Y+19	; 0x13
    2146:	9c 89       	ldd	r25, Y+20	; 0x14
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9c 8b       	std	Y+20, r25	; 0x14
    214c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	8b 89       	ldd	r24, Y+19	; 0x13
    2150:	9c 89       	ldd	r25, Y+20	; 0x14
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <LCD_sendCommand+0x29a>
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6d 89       	ldd	r22, Y+21	; 0x15
    215a:	7e 89       	ldd	r23, Y+22	; 0x16
    215c:	8f 89       	ldd	r24, Y+23	; 0x17
    215e:	98 8d       	ldd	r25, Y+24	; 0x18
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9c 8b       	std	Y+20, r25	; 0x14
    216a:	8b 8b       	std	Y+19, r24	; 0x13
    216c:	8b 89       	ldd	r24, Y+19	; 0x13
    216e:	9c 89       	ldd	r25, Y+20	; 0x14
    2170:	98 8b       	std	Y+16, r25	; 0x10
    2172:	8f 87       	std	Y+15, r24	; 0x0f
    2174:	8f 85       	ldd	r24, Y+15	; 0x0f
    2176:	98 89       	ldd	r25, Y+16	; 0x10
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_sendCommand+0x2e2>
    217c:	98 8b       	std	Y+16, r25	; 0x10
    217e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	62 e0       	ldi	r22, 0x02	; 2
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_writePin>
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a0 e8       	ldi	r26, 0x80	; 128
    2190:	bf e3       	ldi	r27, 0x3F	; 63
    2192:	8b 87       	std	Y+11, r24	; 0x0b
    2194:	9c 87       	std	Y+12, r25	; 0x0c
    2196:	ad 87       	std	Y+13, r26	; 0x0d
    2198:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219a:	6b 85       	ldd	r22, Y+11	; 0x0b
    219c:	7c 85       	ldd	r23, Y+12	; 0x0c
    219e:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a e7       	ldi	r20, 0x7A	; 122
    21a8:	53 e4       	ldi	r21, 0x43	; 67
    21aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	8f 83       	std	Y+7, r24	; 0x07
    21b4:	98 87       	std	Y+8, r25	; 0x08
    21b6:	a9 87       	std	Y+9, r26	; 0x09
    21b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ce:	88 23       	and	r24, r24
    21d0:	2c f4       	brge	.+10     	; 0x21dc <LCD_sendCommand+0x346>
		__ticks = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	3f c0       	rjmp	.+126    	; 0x225a <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    21dc:	6f 81       	ldd	r22, Y+7	; 0x07
    21de:	78 85       	ldd	r23, Y+8	; 0x08
    21e0:	89 85       	ldd	r24, Y+9	; 0x09
    21e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	3f ef       	ldi	r19, 0xFF	; 255
    21e8:	4f e7       	ldi	r20, 0x7F	; 127
    21ea:	57 e4       	ldi	r21, 0x47	; 71
    21ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	4c f5       	brge	.+82     	; 0x2246 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e2       	ldi	r20, 0x20	; 32
    2202:	51 e4       	ldi	r21, 0x41	; 65
    2204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	0f c0       	rjmp	.+30     	; 0x223c <LCD_sendCommand+0x3a6>
    221e:	89 e1       	ldi	r24, 0x19	; 25
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9c 83       	std	Y+4, r25	; 0x04
    2224:	8b 83       	std	Y+3, r24	; 0x03
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <LCD_sendCommand+0x394>
    222e:	9c 83       	std	Y+4, r25	; 0x04
    2230:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2232:	8d 81       	ldd	r24, Y+5	; 0x05
    2234:	9e 81       	ldd	r25, Y+6	; 0x06
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	69 f7       	brne	.-38     	; 0x221e <LCD_sendCommand+0x388>
    2244:	14 c0       	rjmp	.+40     	; 0x226e <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2246:	6f 81       	ldd	r22, Y+7	; 0x07
    2248:	78 85       	ldd	r23, Y+8	; 0x08
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	9e 83       	std	Y+6, r25	; 0x06
    2258:	8d 83       	std	Y+5, r24	; 0x05
    225a:	8d 81       	ldd	r24, Y+5	; 0x05
    225c:	9e 81       	ldd	r25, Y+6	; 0x06
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <LCD_sendCommand+0x3d0>
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    226e:	ea 96       	adiw	r28, 0x3a	; 58
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	ea 97       	sbiw	r28, 0x3a	; 58
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2296:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	41 e0       	ldi	r20, 0x01	; 1
    229e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	61 e0       	ldi	r22, 0x01	; 1
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_writePin>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	a0 e8       	ldi	r26, 0x80	; 128
    22b2:	bf e3       	ldi	r27, 0x3F	; 63
    22b4:	8d ab       	std	Y+53, r24	; 0x35
    22b6:	9e ab       	std	Y+54, r25	; 0x36
    22b8:	af ab       	std	Y+55, r26	; 0x37
    22ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22bc:	6d a9       	ldd	r22, Y+53	; 0x35
    22be:	7e a9       	ldd	r23, Y+54	; 0x36
    22c0:	8f a9       	ldd	r24, Y+55	; 0x37
    22c2:	98 ad       	ldd	r25, Y+56	; 0x38
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a e7       	ldi	r20, 0x7A	; 122
    22ca:	53 e4       	ldi	r21, 0x43	; 67
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	89 ab       	std	Y+49, r24	; 0x31
    22d6:	9a ab       	std	Y+50, r25	; 0x32
    22d8:	ab ab       	std	Y+51, r26	; 0x33
    22da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22dc:	69 a9       	ldd	r22, Y+49	; 0x31
    22de:	7a a9       	ldd	r23, Y+50	; 0x32
    22e0:	8b a9       	ldd	r24, Y+51	; 0x33
    22e2:	9c a9       	ldd	r25, Y+52	; 0x34
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e8       	ldi	r20, 0x80	; 128
    22ea:	5f e3       	ldi	r21, 0x3F	; 63
    22ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f0:	88 23       	and	r24, r24
    22f2:	2c f4       	brge	.+10     	; 0x22fe <LCD_displayCharacter+0x7e>
		__ticks = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	98 ab       	std	Y+48, r25	; 0x30
    22fa:	8f a7       	std	Y+47, r24	; 0x2f
    22fc:	3f c0       	rjmp	.+126    	; 0x237c <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    22fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2300:	7a a9       	ldd	r23, Y+50	; 0x32
    2302:	8b a9       	ldd	r24, Y+51	; 0x33
    2304:	9c a9       	ldd	r25, Y+52	; 0x34
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	3f ef       	ldi	r19, 0xFF	; 255
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	57 e4       	ldi	r21, 0x47	; 71
    230e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	4c f5       	brge	.+82     	; 0x2368 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2316:	6d a9       	ldd	r22, Y+53	; 0x35
    2318:	7e a9       	ldd	r23, Y+54	; 0x36
    231a:	8f a9       	ldd	r24, Y+55	; 0x37
    231c:	98 ad       	ldd	r25, Y+56	; 0x38
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	98 ab       	std	Y+48, r25	; 0x30
    233c:	8f a7       	std	Y+47, r24	; 0x2f
    233e:	0f c0       	rjmp	.+30     	; 0x235e <LCD_displayCharacter+0xde>
    2340:	89 e1       	ldi	r24, 0x19	; 25
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9e a7       	std	Y+46, r25	; 0x2e
    2346:	8d a7       	std	Y+45, r24	; 0x2d
    2348:	8d a5       	ldd	r24, Y+45	; 0x2d
    234a:	9e a5       	ldd	r25, Y+46	; 0x2e
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_displayCharacter+0xcc>
    2350:	9e a7       	std	Y+46, r25	; 0x2e
    2352:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	8f a5       	ldd	r24, Y+47	; 0x2f
    2356:	98 a9       	ldd	r25, Y+48	; 0x30
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	98 ab       	std	Y+48, r25	; 0x30
    235c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2360:	98 a9       	ldd	r25, Y+48	; 0x30
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	69 f7       	brne	.-38     	; 0x2340 <LCD_displayCharacter+0xc0>
    2366:	14 c0       	rjmp	.+40     	; 0x2390 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2368:	69 a9       	ldd	r22, Y+49	; 0x31
    236a:	7a a9       	ldd	r23, Y+50	; 0x32
    236c:	8b a9       	ldd	r24, Y+51	; 0x33
    236e:	9c a9       	ldd	r25, Y+52	; 0x34
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	98 ab       	std	Y+48, r25	; 0x30
    237a:	8f a7       	std	Y+47, r24	; 0x2f
    237c:	8f a5       	ldd	r24, Y+47	; 0x2f
    237e:	98 a9       	ldd	r25, Y+48	; 0x30
    2380:	9c a7       	std	Y+44, r25	; 0x2c
    2382:	8b a7       	std	Y+43, r24	; 0x2b
    2384:	8b a5       	ldd	r24, Y+43	; 0x2b
    2386:	9c a5       	ldd	r25, Y+44	; 0x2c
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_displayCharacter+0x108>
    238c:	9c a7       	std	Y+44, r25	; 0x2c
    238e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	62 e0       	ldi	r22, 0x02	; 2
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_writePin>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a0 e8       	ldi	r26, 0x80	; 128
    23a0:	bf e3       	ldi	r27, 0x3F	; 63
    23a2:	8f a3       	std	Y+39, r24	; 0x27
    23a4:	98 a7       	std	Y+40, r25	; 0x28
    23a6:	a9 a7       	std	Y+41, r26	; 0x29
    23a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	6f a1       	ldd	r22, Y+39	; 0x27
    23ac:	78 a5       	ldd	r23, Y+40	; 0x28
    23ae:	89 a5       	ldd	r24, Y+41	; 0x29
    23b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a e7       	ldi	r20, 0x7A	; 122
    23b8:	53 e4       	ldi	r21, 0x43	; 67
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8b a3       	std	Y+35, r24	; 0x23
    23c4:	9c a3       	std	Y+36, r25	; 0x24
    23c6:	ad a3       	std	Y+37, r26	; 0x25
    23c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23ca:	6b a1       	ldd	r22, Y+35	; 0x23
    23cc:	7c a1       	ldd	r23, Y+36	; 0x24
    23ce:	8d a1       	ldd	r24, Y+37	; 0x25
    23d0:	9e a1       	ldd	r25, Y+38	; 0x26
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	2c f4       	brge	.+10     	; 0x23ec <LCD_displayCharacter+0x16c>
		__ticks = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9a a3       	std	Y+34, r25	; 0x22
    23e8:	89 a3       	std	Y+33, r24	; 0x21
    23ea:	3f c0       	rjmp	.+126    	; 0x246a <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    23ec:	6b a1       	ldd	r22, Y+35	; 0x23
    23ee:	7c a1       	ldd	r23, Y+36	; 0x24
    23f0:	8d a1       	ldd	r24, Y+37	; 0x25
    23f2:	9e a1       	ldd	r25, Y+38	; 0x26
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	4c f5       	brge	.+82     	; 0x2456 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	6f a1       	ldd	r22, Y+39	; 0x27
    2406:	78 a5       	ldd	r23, Y+40	; 0x28
    2408:	89 a5       	ldd	r24, Y+41	; 0x29
    240a:	9a a5       	ldd	r25, Y+42	; 0x2a
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9a a3       	std	Y+34, r25	; 0x22
    242a:	89 a3       	std	Y+33, r24	; 0x21
    242c:	0f c0       	rjmp	.+30     	; 0x244c <LCD_displayCharacter+0x1cc>
    242e:	89 e1       	ldi	r24, 0x19	; 25
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	98 a3       	std	Y+32, r25	; 0x20
    2434:	8f 8f       	std	Y+31, r24	; 0x1f
    2436:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2438:	98 a1       	ldd	r25, Y+32	; 0x20
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <LCD_displayCharacter+0x1ba>
    243e:	98 a3       	std	Y+32, r25	; 0x20
    2440:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	89 a1       	ldd	r24, Y+33	; 0x21
    2444:	9a a1       	ldd	r25, Y+34	; 0x22
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	9a a3       	std	Y+34, r25	; 0x22
    244a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	89 a1       	ldd	r24, Y+33	; 0x21
    244e:	9a a1       	ldd	r25, Y+34	; 0x22
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	69 f7       	brne	.-38     	; 0x242e <LCD_displayCharacter+0x1ae>
    2454:	14 c0       	rjmp	.+40     	; 0x247e <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	6b a1       	ldd	r22, Y+35	; 0x23
    2458:	7c a1       	ldd	r23, Y+36	; 0x24
    245a:	8d a1       	ldd	r24, Y+37	; 0x25
    245c:	9e a1       	ldd	r25, Y+38	; 0x26
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9a a3       	std	Y+34, r25	; 0x22
    2468:	89 a3       	std	Y+33, r24	; 0x21
    246a:	89 a1       	ldd	r24, Y+33	; 0x21
    246c:	9a a1       	ldd	r25, Y+34	; 0x22
    246e:	9e 8f       	std	Y+30, r25	; 0x1e
    2470:	8d 8f       	std	Y+29, r24	; 0x1d
    2472:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2474:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <LCD_displayCharacter+0x1f6>
    247a:	9e 8f       	std	Y+30, r25	; 0x1e
    247c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	6a ad       	ldd	r22, Y+58	; 0x3a
    2482:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GPIO_writePort>
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	a0 e8       	ldi	r26, 0x80	; 128
    248c:	bf e3       	ldi	r27, 0x3F	; 63
    248e:	89 8f       	std	Y+25, r24	; 0x19
    2490:	9a 8f       	std	Y+26, r25	; 0x1a
    2492:	ab 8f       	std	Y+27, r26	; 0x1b
    2494:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2496:	69 8d       	ldd	r22, Y+25	; 0x19
    2498:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	4a e7       	ldi	r20, 0x7A	; 122
    24a4:	53 e4       	ldi	r21, 0x43	; 67
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8d 8b       	std	Y+21, r24	; 0x15
    24b0:	9e 8b       	std	Y+22, r25	; 0x16
    24b2:	af 8b       	std	Y+23, r26	; 0x17
    24b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b6:	6d 89       	ldd	r22, Y+21	; 0x15
    24b8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ba:	8f 89       	ldd	r24, Y+23	; 0x17
    24bc:	98 8d       	ldd	r25, Y+24	; 0x18
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e8       	ldi	r20, 0x80	; 128
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ca:	88 23       	and	r24, r24
    24cc:	2c f4       	brge	.+10     	; 0x24d8 <LCD_displayCharacter+0x258>
		__ticks = 1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9c 8b       	std	Y+20, r25	; 0x14
    24d4:	8b 8b       	std	Y+19, r24	; 0x13
    24d6:	3f c0       	rjmp	.+126    	; 0x2556 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    24d8:	6d 89       	ldd	r22, Y+21	; 0x15
    24da:	7e 89       	ldd	r23, Y+22	; 0x16
    24dc:	8f 89       	ldd	r24, Y+23	; 0x17
    24de:	98 8d       	ldd	r25, Y+24	; 0x18
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	3f ef       	ldi	r19, 0xFF	; 255
    24e4:	4f e7       	ldi	r20, 0x7F	; 127
    24e6:	57 e4       	ldi	r21, 0x47	; 71
    24e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ec:	18 16       	cp	r1, r24
    24ee:	4c f5       	brge	.+82     	; 0x2542 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f0:	69 8d       	ldd	r22, Y+25	; 0x19
    24f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e2       	ldi	r20, 0x20	; 32
    24fe:	51 e4       	ldi	r21, 0x41	; 65
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9c 8b       	std	Y+20, r25	; 0x14
    2516:	8b 8b       	std	Y+19, r24	; 0x13
    2518:	0f c0       	rjmp	.+30     	; 0x2538 <LCD_displayCharacter+0x2b8>
    251a:	89 e1       	ldi	r24, 0x19	; 25
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	9a 8b       	std	Y+18, r25	; 0x12
    2520:	89 8b       	std	Y+17, r24	; 0x11
    2522:	89 89       	ldd	r24, Y+17	; 0x11
    2524:	9a 89       	ldd	r25, Y+18	; 0x12
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <LCD_displayCharacter+0x2a6>
    252a:	9a 8b       	std	Y+18, r25	; 0x12
    252c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252e:	8b 89       	ldd	r24, Y+19	; 0x13
    2530:	9c 89       	ldd	r25, Y+20	; 0x14
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2538:	8b 89       	ldd	r24, Y+19	; 0x13
    253a:	9c 89       	ldd	r25, Y+20	; 0x14
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	69 f7       	brne	.-38     	; 0x251a <LCD_displayCharacter+0x29a>
    2540:	14 c0       	rjmp	.+40     	; 0x256a <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2542:	6d 89       	ldd	r22, Y+21	; 0x15
    2544:	7e 89       	ldd	r23, Y+22	; 0x16
    2546:	8f 89       	ldd	r24, Y+23	; 0x17
    2548:	98 8d       	ldd	r25, Y+24	; 0x18
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9c 8b       	std	Y+20, r25	; 0x14
    2554:	8b 8b       	std	Y+19, r24	; 0x13
    2556:	8b 89       	ldd	r24, Y+19	; 0x13
    2558:	9c 89       	ldd	r25, Y+20	; 0x14
    255a:	98 8b       	std	Y+16, r25	; 0x10
    255c:	8f 87       	std	Y+15, r24	; 0x0f
    255e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2560:	98 89       	ldd	r25, Y+16	; 0x10
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <LCD_displayCharacter+0x2e2>
    2566:	98 8b       	std	Y+16, r25	; 0x10
    2568:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	62 e0       	ldi	r22, 0x02	; 2
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_writePin>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a0 e8       	ldi	r26, 0x80	; 128
    257a:	bf e3       	ldi	r27, 0x3F	; 63
    257c:	8b 87       	std	Y+11, r24	; 0x0b
    257e:	9c 87       	std	Y+12, r25	; 0x0c
    2580:	ad 87       	std	Y+13, r26	; 0x0d
    2582:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2584:	6b 85       	ldd	r22, Y+11	; 0x0b
    2586:	7c 85       	ldd	r23, Y+12	; 0x0c
    2588:	8d 85       	ldd	r24, Y+13	; 0x0d
    258a:	9e 85       	ldd	r25, Y+14	; 0x0e
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	4a e7       	ldi	r20, 0x7A	; 122
    2592:	53 e4       	ldi	r21, 0x43	; 67
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	8f 83       	std	Y+7, r24	; 0x07
    259e:	98 87       	std	Y+8, r25	; 0x08
    25a0:	a9 87       	std	Y+9, r26	; 0x09
    25a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a4:	6f 81       	ldd	r22, Y+7	; 0x07
    25a6:	78 85       	ldd	r23, Y+8	; 0x08
    25a8:	89 85       	ldd	r24, Y+9	; 0x09
    25aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e8       	ldi	r20, 0x80	; 128
    25b2:	5f e3       	ldi	r21, 0x3F	; 63
    25b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b8:	88 23       	and	r24, r24
    25ba:	2c f4       	brge	.+10     	; 0x25c6 <LCD_displayCharacter+0x346>
		__ticks = 1;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
    25c4:	3f c0       	rjmp	.+126    	; 0x2644 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    25c6:	6f 81       	ldd	r22, Y+7	; 0x07
    25c8:	78 85       	ldd	r23, Y+8	; 0x08
    25ca:	89 85       	ldd	r24, Y+9	; 0x09
    25cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	3f ef       	ldi	r19, 0xFF	; 255
    25d2:	4f e7       	ldi	r20, 0x7F	; 127
    25d4:	57 e4       	ldi	r21, 0x47	; 71
    25d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25da:	18 16       	cp	r1, r24
    25dc:	4c f5       	brge	.+82     	; 0x2630 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25de:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e2       	ldi	r20, 0x20	; 32
    25ec:	51 e4       	ldi	r21, 0x41	; 65
    25ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	bc 01       	movw	r22, r24
    25f8:	cd 01       	movw	r24, r26
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
    2606:	0f c0       	rjmp	.+30     	; 0x2626 <LCD_displayCharacter+0x3a6>
    2608:	89 e1       	ldi	r24, 0x19	; 25
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	9c 83       	std	Y+4, r25	; 0x04
    260e:	8b 83       	std	Y+3, r24	; 0x03
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <LCD_displayCharacter+0x394>
    2618:	9c 83       	std	Y+4, r25	; 0x04
    261a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	9e 83       	std	Y+6, r25	; 0x06
    2624:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	69 f7       	brne	.-38     	; 0x2608 <LCD_displayCharacter+0x388>
    262e:	14 c0       	rjmp	.+40     	; 0x2658 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2630:	6f 81       	ldd	r22, Y+7	; 0x07
    2632:	78 85       	ldd	r23, Y+8	; 0x08
    2634:	89 85       	ldd	r24, Y+9	; 0x09
    2636:	9a 85       	ldd	r25, Y+10	; 0x0a
    2638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <LCD_displayCharacter+0x3d0>
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2658:	ea 96       	adiw	r28, 0x3a	; 58
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	00 d0       	rcall	.+0      	; 0x2670 <LCD_displayString+0x6>
    2670:	0f 92       	push	r0
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	9b 83       	std	Y+3, r25	; 0x03
    2678:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    267a:	19 82       	std	Y+1, r1	; 0x01
    267c:	0e c0       	rjmp	.+28     	; 0x269a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	9b 81       	ldd	r25, Y+3	; 0x03
    2688:	fc 01       	movw	r30, r24
    268a:	e2 0f       	add	r30, r18
    268c:	f3 1f       	adc	r31, r19
    268e:	80 81       	ld	r24, Z
    2690:	0e 94 40 11 	call	0x2280	; 0x2280 <LCD_displayCharacter>
		i++;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	9b 81       	ldd	r25, Y+3	; 0x03
    26a4:	fc 01       	movw	r30, r24
    26a6:	e2 0f       	add	r30, r18
    26a8:	f3 1f       	adc	r31, r19
    26aa:	80 81       	ld	r24, Z
    26ac:	88 23       	and	r24, r24
    26ae:	39 f7       	brne	.-50     	; 0x267e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <LCD_moveCursor+0x6>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <LCD_moveCursor+0x8>
    26c4:	0f 92       	push	r0
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	28 2f       	mov	r18, r24
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	3d 83       	std	Y+5, r19	; 0x05
    26d6:	2c 83       	std	Y+4, r18	; 0x04
    26d8:	8c 81       	ldd	r24, Y+4	; 0x04
    26da:	9d 81       	ldd	r25, Y+5	; 0x05
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	91 05       	cpc	r25, r1
    26e0:	c1 f0       	breq	.+48     	; 0x2712 <LCD_moveCursor+0x56>
    26e2:	2c 81       	ldd	r18, Y+4	; 0x04
    26e4:	3d 81       	ldd	r19, Y+5	; 0x05
    26e6:	22 30       	cpi	r18, 0x02	; 2
    26e8:	31 05       	cpc	r19, r1
    26ea:	2c f4       	brge	.+10     	; 0x26f6 <LCD_moveCursor+0x3a>
    26ec:	8c 81       	ldd	r24, Y+4	; 0x04
    26ee:	9d 81       	ldd	r25, Y+5	; 0x05
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	61 f0       	breq	.+24     	; 0x270c <LCD_moveCursor+0x50>
    26f4:	19 c0       	rjmp	.+50     	; 0x2728 <LCD_moveCursor+0x6c>
    26f6:	2c 81       	ldd	r18, Y+4	; 0x04
    26f8:	3d 81       	ldd	r19, Y+5	; 0x05
    26fa:	22 30       	cpi	r18, 0x02	; 2
    26fc:	31 05       	cpc	r19, r1
    26fe:	69 f0       	breq	.+26     	; 0x271a <LCD_moveCursor+0x5e>
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	9d 81       	ldd	r25, Y+5	; 0x05
    2704:	83 30       	cpi	r24, 0x03	; 3
    2706:	91 05       	cpc	r25, r1
    2708:	61 f0       	breq	.+24     	; 0x2722 <LCD_moveCursor+0x66>
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	0b c0       	rjmp	.+22     	; 0x2728 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	80 5c       	subi	r24, 0xC0	; 192
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	07 c0       	rjmp	.+14     	; 0x2728 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	80 5f       	subi	r24, 0xF0	; 240
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	03 c0       	rjmp	.+6      	; 0x2728 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	80 5b       	subi	r24, 0xB0	; 176
    2726:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	80 68       	ori	r24, 0x80	; 128
    272c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_sendCommand>
}
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <LCD_displayStringRowColumn+0x6>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <LCD_displayStringRowColumn+0x8>
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	6a 83       	std	Y+2, r22	; 0x02
    2750:	5c 83       	std	Y+4, r21	; 0x04
    2752:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	6a 81       	ldd	r22, Y+2	; 0x02
    2758:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
}
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	62 97       	sbiw	r28, 0x12	; 18
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	9a 8b       	std	Y+18, r25	; 0x12
    2788:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    278a:	89 89       	ldd	r24, Y+17	; 0x11
    278c:	9a 89       	ldd	r25, Y+18	; 0x12
    278e:	9e 01       	movw	r18, r28
    2790:	2f 5f       	subi	r18, 0xFF	; 255
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	b9 01       	movw	r22, r18
    2796:	4a e0       	ldi	r20, 0x0A	; 10
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	0e 94 31 18 	call	0x3062	; 0x3062 <itoa>
   LCD_displayString(buff); /* Display the string */
    279e:	ce 01       	movw	r24, r28
    27a0:	01 96       	adiw	r24, 0x01	; 1
    27a2:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
}
    27a6:	62 96       	adiw	r28, 0x12	; 18
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_sendCommand>
}
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect){
    27cc:	1f 92       	push	r1
    27ce:	0f 92       	push	r0
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	0f 92       	push	r0
    27d4:	11 24       	eor	r1, r1
    27d6:	2f 93       	push	r18
    27d8:	3f 93       	push	r19
    27da:	4f 93       	push	r20
    27dc:	5f 93       	push	r21
    27de:	6f 93       	push	r22
    27e0:	7f 93       	push	r23
    27e2:	8f 93       	push	r24
    27e4:	9f 93       	push	r25
    27e6:	af 93       	push	r26
    27e8:	bf 93       	push	r27
    27ea:	ef 93       	push	r30
    27ec:	ff 93       	push	r31
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR){
    27f6:	80 91 fc 00 	lds	r24, 0x00FC
    27fa:	90 91 fd 00 	lds	r25, 0x00FD
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	29 f0       	breq	.+10     	; 0x280c <__vector_9+0x40>
			/* Call the Call Back function in the application after timer finishes counting in overflow mode */
			(*g_callBackPtr_Timer0)();
    2802:	e0 91 fc 00 	lds	r30, 0x00FC
    2806:	f0 91 fd 00 	lds	r31, 0x00FD
    280a:	09 95       	icall
		}
}
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	ff 91       	pop	r31
    2812:	ef 91       	pop	r30
    2814:	bf 91       	pop	r27
    2816:	af 91       	pop	r26
    2818:	9f 91       	pop	r25
    281a:	8f 91       	pop	r24
    281c:	7f 91       	pop	r23
    281e:	6f 91       	pop	r22
    2820:	5f 91       	pop	r21
    2822:	4f 91       	pop	r20
    2824:	3f 91       	pop	r19
    2826:	2f 91       	pop	r18
    2828:	0f 90       	pop	r0
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	0f 90       	pop	r0
    282e:	1f 90       	pop	r1
    2830:	18 95       	reti

00002832 <__vector_19>:
ISR(TIMER0_COMP_vect){
    2832:	1f 92       	push	r1
    2834:	0f 92       	push	r0
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	0f 92       	push	r0
    283a:	11 24       	eor	r1, r1
    283c:	2f 93       	push	r18
    283e:	3f 93       	push	r19
    2840:	4f 93       	push	r20
    2842:	5f 93       	push	r21
    2844:	6f 93       	push	r22
    2846:	7f 93       	push	r23
    2848:	8f 93       	push	r24
    284a:	9f 93       	push	r25
    284c:	af 93       	push	r26
    284e:	bf 93       	push	r27
    2850:	ef 93       	push	r30
    2852:	ff 93       	push	r31
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR){
    285c:	80 91 fc 00 	lds	r24, 0x00FC
    2860:	90 91 fd 00 	lds	r25, 0x00FD
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	29 f0       	breq	.+10     	; 0x2872 <__vector_19+0x40>
		/* Call the Call Back function in the application after timer finishes counting in compare mode*/
			(*g_callBackPtr_Timer0)();
    2868:	e0 91 fc 00 	lds	r30, 0x00FC
    286c:	f0 91 fd 00 	lds	r31, 0x00FD
    2870:	09 95       	icall
		}
}
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	ff 91       	pop	r31
    2878:	ef 91       	pop	r30
    287a:	bf 91       	pop	r27
    287c:	af 91       	pop	r26
    287e:	9f 91       	pop	r25
    2880:	8f 91       	pop	r24
    2882:	7f 91       	pop	r23
    2884:	6f 91       	pop	r22
    2886:	5f 91       	pop	r21
    2888:	4f 91       	pop	r20
    288a:	3f 91       	pop	r19
    288c:	2f 91       	pop	r18
    288e:	0f 90       	pop	r0
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	0f 90       	pop	r0
    2894:	1f 90       	pop	r1
    2896:	18 95       	reti

00002898 <__vector_8>:
ISR(TIMER1_OVF_vect){
    2898:	1f 92       	push	r1
    289a:	0f 92       	push	r0
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	0f 92       	push	r0
    28a0:	11 24       	eor	r1, r1
    28a2:	2f 93       	push	r18
    28a4:	3f 93       	push	r19
    28a6:	4f 93       	push	r20
    28a8:	5f 93       	push	r21
    28aa:	6f 93       	push	r22
    28ac:	7f 93       	push	r23
    28ae:	8f 93       	push	r24
    28b0:	9f 93       	push	r25
    28b2:	af 93       	push	r26
    28b4:	bf 93       	push	r27
    28b6:	ef 93       	push	r30
    28b8:	ff 93       	push	r31
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR){
    28c2:	80 91 fe 00 	lds	r24, 0x00FE
    28c6:	90 91 ff 00 	lds	r25, 0x00FF
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	29 f0       	breq	.+10     	; 0x28d8 <__vector_8+0x40>
		/* Call the Call Back function in the application after timer finishes counting in overflow mode */
				(*g_callBackPtr_Timer1)();
    28ce:	e0 91 fe 00 	lds	r30, 0x00FE
    28d2:	f0 91 ff 00 	lds	r31, 0x00FF
    28d6:	09 95       	icall
			}
}
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	ff 91       	pop	r31
    28de:	ef 91       	pop	r30
    28e0:	bf 91       	pop	r27
    28e2:	af 91       	pop	r26
    28e4:	9f 91       	pop	r25
    28e6:	8f 91       	pop	r24
    28e8:	7f 91       	pop	r23
    28ea:	6f 91       	pop	r22
    28ec:	5f 91       	pop	r21
    28ee:	4f 91       	pop	r20
    28f0:	3f 91       	pop	r19
    28f2:	2f 91       	pop	r18
    28f4:	0f 90       	pop	r0
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	0f 90       	pop	r0
    28fa:	1f 90       	pop	r1
    28fc:	18 95       	reti

000028fe <__vector_6>:
ISR(TIMER1_COMPA_vect){
    28fe:	1f 92       	push	r1
    2900:	0f 92       	push	r0
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	0f 92       	push	r0
    2906:	11 24       	eor	r1, r1
    2908:	2f 93       	push	r18
    290a:	3f 93       	push	r19
    290c:	4f 93       	push	r20
    290e:	5f 93       	push	r21
    2910:	6f 93       	push	r22
    2912:	7f 93       	push	r23
    2914:	8f 93       	push	r24
    2916:	9f 93       	push	r25
    2918:	af 93       	push	r26
    291a:	bf 93       	push	r27
    291c:	ef 93       	push	r30
    291e:	ff 93       	push	r31
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR){
    2928:	80 91 fe 00 	lds	r24, 0x00FE
    292c:	90 91 ff 00 	lds	r25, 0x00FF
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	29 f0       	breq	.+10     	; 0x293e <__vector_6+0x40>
		/* Call the Call Back function in the application after timer finishes counting in compare mode*/
				(*g_callBackPtr_Timer1)();
    2934:	e0 91 fe 00 	lds	r30, 0x00FE
    2938:	f0 91 ff 00 	lds	r31, 0x00FF
    293c:	09 95       	icall
			}
}
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	ff 91       	pop	r31
    2944:	ef 91       	pop	r30
    2946:	bf 91       	pop	r27
    2948:	af 91       	pop	r26
    294a:	9f 91       	pop	r25
    294c:	8f 91       	pop	r24
    294e:	7f 91       	pop	r23
    2950:	6f 91       	pop	r22
    2952:	5f 91       	pop	r21
    2954:	4f 91       	pop	r20
    2956:	3f 91       	pop	r19
    2958:	2f 91       	pop	r18
    295a:	0f 90       	pop	r0
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	0f 90       	pop	r0
    2960:	1f 90       	pop	r1
    2962:	18 95       	reti

00002964 <__vector_4>:
ISR(TIMER2_OVF_vect){
    2964:	1f 92       	push	r1
    2966:	0f 92       	push	r0
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	0f 92       	push	r0
    296c:	11 24       	eor	r1, r1
    296e:	2f 93       	push	r18
    2970:	3f 93       	push	r19
    2972:	4f 93       	push	r20
    2974:	5f 93       	push	r21
    2976:	6f 93       	push	r22
    2978:	7f 93       	push	r23
    297a:	8f 93       	push	r24
    297c:	9f 93       	push	r25
    297e:	af 93       	push	r26
    2980:	bf 93       	push	r27
    2982:	ef 93       	push	r30
    2984:	ff 93       	push	r31
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR){
    298e:	80 91 00 01 	lds	r24, 0x0100
    2992:	90 91 01 01 	lds	r25, 0x0101
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	29 f0       	breq	.+10     	; 0x29a4 <__vector_4+0x40>
		/* Call the Call Back function in the application after timer finishes counting in overflow mode */
				(*g_callBackPtr_Timer2)();
    299a:	e0 91 00 01 	lds	r30, 0x0100
    299e:	f0 91 01 01 	lds	r31, 0x0101
    29a2:	09 95       	icall
			}
}
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	ff 91       	pop	r31
    29aa:	ef 91       	pop	r30
    29ac:	bf 91       	pop	r27
    29ae:	af 91       	pop	r26
    29b0:	9f 91       	pop	r25
    29b2:	8f 91       	pop	r24
    29b4:	7f 91       	pop	r23
    29b6:	6f 91       	pop	r22
    29b8:	5f 91       	pop	r21
    29ba:	4f 91       	pop	r20
    29bc:	3f 91       	pop	r19
    29be:	2f 91       	pop	r18
    29c0:	0f 90       	pop	r0
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	0f 90       	pop	r0
    29c6:	1f 90       	pop	r1
    29c8:	18 95       	reti

000029ca <__vector_3>:
ISR(TIMER2_COMP_vect){
    29ca:	1f 92       	push	r1
    29cc:	0f 92       	push	r0
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	0f 92       	push	r0
    29d2:	11 24       	eor	r1, r1
    29d4:	2f 93       	push	r18
    29d6:	3f 93       	push	r19
    29d8:	4f 93       	push	r20
    29da:	5f 93       	push	r21
    29dc:	6f 93       	push	r22
    29de:	7f 93       	push	r23
    29e0:	8f 93       	push	r24
    29e2:	9f 93       	push	r25
    29e4:	af 93       	push	r26
    29e6:	bf 93       	push	r27
    29e8:	ef 93       	push	r30
    29ea:	ff 93       	push	r31
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR){
    29f4:	80 91 00 01 	lds	r24, 0x0100
    29f8:	90 91 01 01 	lds	r25, 0x0101
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	29 f0       	breq	.+10     	; 0x2a0a <__vector_3+0x40>
		/* Call the Call Back function in the application after timer finishes counting in compare mode*/
				(*g_callBackPtr_Timer2)();
    2a00:	e0 91 00 01 	lds	r30, 0x0100
    2a04:	f0 91 01 01 	lds	r31, 0x0101
    2a08:	09 95       	icall
			}
}
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	ff 91       	pop	r31
    2a10:	ef 91       	pop	r30
    2a12:	bf 91       	pop	r27
    2a14:	af 91       	pop	r26
    2a16:	9f 91       	pop	r25
    2a18:	8f 91       	pop	r24
    2a1a:	7f 91       	pop	r23
    2a1c:	6f 91       	pop	r22
    2a1e:	5f 91       	pop	r21
    2a20:	4f 91       	pop	r20
    2a22:	3f 91       	pop	r19
    2a24:	2f 91       	pop	r18
    2a26:	0f 90       	pop	r0
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	0f 90       	pop	r0
    2a2c:	1f 90       	pop	r1
    2a2e:	18 95       	reti

00002a30 <Timer_init>:
 * Mode of opertion  (Overflow, Compare)
 * initial value of timer
 * compare value for compare mode
 * prescalar
 */
void Timer_init(const Timer_ConfigType * Config_ptr){
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <Timer_init+0x6>
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
	if(Config_ptr->ID ==0){    /*In case using timer 0*/
    2a3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a40:	fa 81       	ldd	r31, Y+2	; 0x02
    2a42:	80 81       	ld	r24, Z
    2a44:	88 23       	and	r24, r24
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <Timer_init+0x1a>
    2a48:	49 c0       	rjmp	.+146    	; 0x2adc <Timer_init+0xac>

		/*Insert 0 or 1 in bit 3 in the register to choose the mode*/
		TCCR0 = (TCCR0 & 0xF7) | ((Config_ptr->mode)<<3);
    2a4a:	a3 e5       	ldi	r26, 0x53	; 83
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e3 e5       	ldi	r30, 0x53	; 83
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	28 2f       	mov	r18, r24
    2a56:	27 7f       	andi	r18, 0xF7	; 247
    2a58:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5c:	81 81       	ldd	r24, Z+1	; 0x01
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	88 0f       	add	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	82 2b       	or	r24, r18
    2a70:	8c 93       	st	X, r24

		/*Insert the required prescale in bit 0,1,2 in the register*/
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->prescalar);
    2a72:	a3 e5       	ldi	r26, 0x53	; 83
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e3 e5       	ldi	r30, 0x53	; 83
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	98 2f       	mov	r25, r24
    2a7e:	98 7f       	andi	r25, 0xF8	; 248
    2a80:	e9 81       	ldd	r30, Y+1	; 0x01
    2a82:	fa 81       	ldd	r31, Y+2	; 0x02
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	89 2b       	or	r24, r25
    2a88:	8c 93       	st	X, r24

		/*Insert initial value*/
		TCNT0 = Config_ptr->initial_value;
    2a8a:	a2 e5       	ldi	r26, 0x52	; 82
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a90:	fa 81       	ldd	r31, Y+2	; 0x02
    2a92:	83 81       	ldd	r24, Z+3	; 0x03
    2a94:	94 81       	ldd	r25, Z+4	; 0x04
    2a96:	8c 93       	st	X, r24

		/*Check which mode is chosen to enable its interrupt*/
		if(Config_ptr->mode == 0){
    2a98:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9c:	81 81       	ldd	r24, Z+1	; 0x01
    2a9e:	88 23       	and	r24, r24
    2aa0:	41 f4       	brne	.+16     	; 0x2ab2 <Timer_init+0x82>
			TIMSK |= (1<<TOIE0);         /*Enable Timer0 Overflow Interrupt*/
    2aa2:	a9 e5       	ldi	r26, 0x59	; 89
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e9 e5       	ldi	r30, 0x59	; 89
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	81 60       	ori	r24, 0x01	; 1
    2aae:	8c 93       	st	X, r24
    2ab0:	b9 c0       	rjmp	.+370    	; 0x2c24 <Timer_init+0x1f4>
		}
		else if(Config_ptr->mode == 1){
    2ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab6:	81 81       	ldd	r24, Z+1	; 0x01
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	09 f0       	breq	.+2      	; 0x2abe <Timer_init+0x8e>
    2abc:	b3 c0       	rjmp	.+358    	; 0x2c24 <Timer_init+0x1f4>
			OCR0 = Config_ptr->compare_value;      /*set compare value*/
    2abe:	ac e5       	ldi	r26, 0x5C	; 92
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac6:	85 81       	ldd	r24, Z+5	; 0x05
    2ac8:	96 81       	ldd	r25, Z+6	; 0x06
    2aca:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0);                 /*Enable Timer0 Compare Interrupt*/
    2acc:	a9 e5       	ldi	r26, 0x59	; 89
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e9 e5       	ldi	r30, 0x59	; 89
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	82 60       	ori	r24, 0x02	; 2
    2ad8:	8c 93       	st	X, r24
    2ada:	a4 c0       	rjmp	.+328    	; 0x2c24 <Timer_init+0x1f4>

		}
	}
	else if(Config_ptr->ID == 1){      /*In case using timer 1*/
    2adc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ade:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae0:	80 81       	ld	r24, Z
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <Timer_init+0xb8>
    2ae6:	51 c0       	rjmp	.+162    	; 0x2b8a <Timer_init+0x15a>

		/*the bit is set to 1 in case using non pwm mode */
		TCCR1A = (1<<FOC1A);
    2ae8:	ef e4       	ldi	r30, 0x4F	; 79
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	88 e0       	ldi	r24, 0x08	; 8
    2aee:	80 83       	st	Z, r24

		/*Insert 0 or 1 in bit 3 in the register to choose the mode*/
		TCCR1B = (TCCR1B & 0xF7) | ((Config_ptr->mode)<<3);
    2af0:	ae e4       	ldi	r26, 0x4E	; 78
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	ee e4       	ldi	r30, 0x4E	; 78
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	28 2f       	mov	r18, r24
    2afc:	27 7f       	andi	r18, 0xF7	; 247
    2afe:	e9 81       	ldd	r30, Y+1	; 0x01
    2b00:	fa 81       	ldd	r31, Y+2	; 0x02
    2b02:	81 81       	ldd	r24, Z+1	; 0x01
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	88 0f       	add	r24, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	82 2b       	or	r24, r18
    2b16:	8c 93       	st	X, r24

		/*Insert the required prescale in bit 0,1,2 in the register*/
		TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescalar);
    2b18:	ae e4       	ldi	r26, 0x4E	; 78
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	ee e4       	ldi	r30, 0x4E	; 78
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	98 2f       	mov	r25, r24
    2b24:	98 7f       	andi	r25, 0xF8	; 248
    2b26:	e9 81       	ldd	r30, Y+1	; 0x01
    2b28:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	89 2b       	or	r24, r25
    2b2e:	8c 93       	st	X, r24

		/*Insert initial value*/
		TCNT1 = Config_ptr->initial_value;
    2b30:	ac e4       	ldi	r26, 0x4C	; 76
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e9 81       	ldd	r30, Y+1	; 0x01
    2b36:	fa 81       	ldd	r31, Y+2	; 0x02
    2b38:	83 81       	ldd	r24, Z+3	; 0x03
    2b3a:	94 81       	ldd	r25, Z+4	; 0x04
    2b3c:	11 96       	adiw	r26, 0x01	; 1
    2b3e:	9c 93       	st	X, r25
    2b40:	8e 93       	st	-X, r24

		/*Check which mode is chosen to enable its interrupt*/
		if(Config_ptr->mode == 0){
    2b42:	e9 81       	ldd	r30, Y+1	; 0x01
    2b44:	fa 81       	ldd	r31, Y+2	; 0x02
    2b46:	81 81       	ldd	r24, Z+1	; 0x01
    2b48:	88 23       	and	r24, r24
    2b4a:	41 f4       	brne	.+16     	; 0x2b5c <Timer_init+0x12c>
			TIMSK |= (1<<TOIE1);         /*Enable Timer1 Overflow Interrupt*/
    2b4c:	a9 e5       	ldi	r26, 0x59	; 89
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e9 e5       	ldi	r30, 0x59	; 89
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	84 60       	ori	r24, 0x04	; 4
    2b58:	8c 93       	st	X, r24
    2b5a:	64 c0       	rjmp	.+200    	; 0x2c24 <Timer_init+0x1f4>
		}
		else if(Config_ptr->mode == 1){
    2b5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b60:	81 81       	ldd	r24, Z+1	; 0x01
    2b62:	81 30       	cpi	r24, 0x01	; 1
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <Timer_init+0x138>
    2b66:	5e c0       	rjmp	.+188    	; 0x2c24 <Timer_init+0x1f4>
			OCR1A = Config_ptr->compare_value;      /*set compare value*/
    2b68:	aa e4       	ldi	r26, 0x4A	; 74
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b70:	85 81       	ldd	r24, Z+5	; 0x05
    2b72:	96 81       	ldd	r25, Z+6	; 0x06
    2b74:	11 96       	adiw	r26, 0x01	; 1
    2b76:	9c 93       	st	X, r25
    2b78:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A);                 /*Enable Timer1 Compare Interrupt*/
    2b7a:	a9 e5       	ldi	r26, 0x59	; 89
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e9 e5       	ldi	r30, 0x59	; 89
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	80 61       	ori	r24, 0x10	; 16
    2b86:	8c 93       	st	X, r24
    2b88:	4d c0       	rjmp	.+154    	; 0x2c24 <Timer_init+0x1f4>

		}
	}
	else if(Config_ptr->ID == 2){      /*In case using timer 2*/
    2b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8e:	80 81       	ld	r24, Z
    2b90:	82 30       	cpi	r24, 0x02	; 2
    2b92:	09 f0       	breq	.+2      	; 0x2b96 <Timer_init+0x166>
    2b94:	47 c0       	rjmp	.+142    	; 0x2c24 <Timer_init+0x1f4>

		/*Insert 0 or 1 in bit 3 in the register to choose the mode*/
		TCCR2 = (TCCR2 & 0xF7) | ((Config_ptr->mode)<<3);
    2b96:	a5 e4       	ldi	r26, 0x45	; 69
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e5 e4       	ldi	r30, 0x45	; 69
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	27 7f       	andi	r18, 0xF7	; 247
    2ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba8:	81 81       	ldd	r24, Z+1	; 0x01
    2baa:	88 2f       	mov	r24, r24
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	82 2b       	or	r24, r18
    2bbc:	8c 93       	st	X, r24

		/*Insert the required prescale in bit 0,1,2 in the register*/
		TCCR2 = (TCCR2 & 0xF8) | (Config_ptr->prescalar);
    2bbe:	a5 e4       	ldi	r26, 0x45	; 69
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e5 e4       	ldi	r30, 0x45	; 69
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	98 2f       	mov	r25, r24
    2bca:	98 7f       	andi	r25, 0xF8	; 248
    2bcc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bce:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd0:	82 81       	ldd	r24, Z+2	; 0x02
    2bd2:	89 2b       	or	r24, r25
    2bd4:	8c 93       	st	X, r24

		/*Insert initial value*/
		TCNT2 = Config_ptr->initial_value;
    2bd6:	a4 e4       	ldi	r26, 0x44	; 68
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	e9 81       	ldd	r30, Y+1	; 0x01
    2bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bde:	83 81       	ldd	r24, Z+3	; 0x03
    2be0:	94 81       	ldd	r25, Z+4	; 0x04
    2be2:	8c 93       	st	X, r24

		/*Check which mode is chosen to enable its interrupt*/
		if(Config_ptr->mode == 0){
    2be4:	e9 81       	ldd	r30, Y+1	; 0x01
    2be6:	fa 81       	ldd	r31, Y+2	; 0x02
    2be8:	81 81       	ldd	r24, Z+1	; 0x01
    2bea:	88 23       	and	r24, r24
    2bec:	41 f4       	brne	.+16     	; 0x2bfe <Timer_init+0x1ce>
			TIMSK |= (1<<TOIE2);         /*Enable Timer2 Overflow Interrupt*/
    2bee:	a9 e5       	ldi	r26, 0x59	; 89
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e9 e5       	ldi	r30, 0x59	; 89
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	80 64       	ori	r24, 0x40	; 64
    2bfa:	8c 93       	st	X, r24
    2bfc:	13 c0       	rjmp	.+38     	; 0x2c24 <Timer_init+0x1f4>
		}
		else if(Config_ptr->mode == 1){
    2bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    2c00:	fa 81       	ldd	r31, Y+2	; 0x02
    2c02:	81 81       	ldd	r24, Z+1	; 0x01
    2c04:	81 30       	cpi	r24, 0x01	; 1
    2c06:	71 f4       	brne	.+28     	; 0x2c24 <Timer_init+0x1f4>
			OCR2 = Config_ptr->compare_value;      /*set compare value*/
    2c08:	a3 e4       	ldi	r26, 0x43	; 67
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c10:	85 81       	ldd	r24, Z+5	; 0x05
    2c12:	96 81       	ldd	r25, Z+6	; 0x06
    2c14:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2);                 /*Enable Timer2 Compare Interrupt*/
    2c16:	a9 e5       	ldi	r26, 0x59	; 89
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e9 e5       	ldi	r30, 0x59	; 89
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	80 68       	ori	r24, 0x80	; 128
    2c22:	8c 93       	st	X, r24

		}
	}

}
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address of timer 0
 */
void Timer0_setCallBack(void(*a_ptr)(void)){
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <Timer0_setCallBack+0x6>
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	9a 83       	std	Y+2, r25	; 0x02
    2c3a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer0 = a_ptr;
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c40:	90 93 fd 00 	sts	0x00FD, r25
    2c44:	80 93 fc 00 	sts	0x00FC, r24
}
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	08 95       	ret

00002c52 <Timer1_setCallBack>:


/*
 * Description: Function to set the Call Back function address of timer 1
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <Timer1_setCallBack+0x6>
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer1 = a_ptr;
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	9a 81       	ldd	r25, Y+2	; 0x02
    2c64:	90 93 ff 00 	sts	0x00FF, r25
    2c68:	80 93 fe 00 	sts	0x00FE, r24
}
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <Timer2_setCallBack>:


/*
 * Description: Function to set the Call Back function address of timer 2
 */
void Timer2_setCallBack(void(*a_ptr)(void)){
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <Timer2_setCallBack+0x6>
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer2 = a_ptr;
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	90 93 01 01 	sts	0x0101, r25
    2c8c:	80 93 00 01 	sts	0x0100, r24
}
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <Timer_DeInit>:

void Timer_DeInit(uint8 id){
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	0f 92       	push	r0
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	89 83       	std	Y+1, r24	; 0x01
	if(id == 0){
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	88 23       	and	r24, r24
    2caa:	c1 f4       	brne	.+48     	; 0x2cdc <Timer_DeInit+0x42>
		TCCR0 = 0;
    2cac:	e3 e5       	ldi	r30, 0x53	; 83
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	10 82       	st	Z, r1
		TCNT0 = 0;
    2cb2:	e2 e5       	ldi	r30, 0x52	; 82
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	10 82       	st	Z, r1
		OCR0 = 0;
    2cb8:	ec e5       	ldi	r30, 0x5C	; 92
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0);         /*disable Timer0 Overflow Interrupt*/
    2cbe:	a9 e5       	ldi	r26, 0x59	; 89
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	e9 e5       	ldi	r30, 0x59	; 89
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	8e 7f       	andi	r24, 0xFE	; 254
    2cca:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);         /*disable Timer0 Compare Interrupt*/
    2ccc:	a9 e5       	ldi	r26, 0x59	; 89
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	e9 e5       	ldi	r30, 0x59	; 89
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	8d 7f       	andi	r24, 0xFD	; 253
    2cd8:	8c 93       	st	X, r24
    2cda:	3a c0       	rjmp	.+116    	; 0x2d50 <Timer_DeInit+0xb6>
	}
	else if(id == 1){
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	81 30       	cpi	r24, 0x01	; 1
    2ce0:	e9 f4       	brne	.+58     	; 0x2d1c <Timer_DeInit+0x82>
			TCCR1A = 0;
    2ce2:	ef e4       	ldi	r30, 0x4F	; 79
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	10 82       	st	Z, r1
			TCCR1B = 0;
    2ce8:	ee e4       	ldi	r30, 0x4E	; 78
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	10 82       	st	Z, r1
			TCNT1 = 0;
    2cee:	ec e4       	ldi	r30, 0x4C	; 76
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	11 82       	std	Z+1, r1	; 0x01
    2cf4:	10 82       	st	Z, r1
			OCR1A = 0;
    2cf6:	ea e4       	ldi	r30, 0x4A	; 74
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	11 82       	std	Z+1, r1	; 0x01
    2cfc:	10 82       	st	Z, r1
			TIMSK &= ~(1<<TOIE1);         /*disable Timer1 Overflow Interrupt*/
    2cfe:	a9 e5       	ldi	r26, 0x59	; 89
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	e9 e5       	ldi	r30, 0x59	; 89
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	8b 7f       	andi	r24, 0xFB	; 251
    2d0a:	8c 93       	st	X, r24
			TIMSK &= ~(1<<OCIE1A);         /*disable Timer1 Compare Interrupt*/
    2d0c:	a9 e5       	ldi	r26, 0x59	; 89
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	e9 e5       	ldi	r30, 0x59	; 89
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	8f 7e       	andi	r24, 0xEF	; 239
    2d18:	8c 93       	st	X, r24
    2d1a:	1a c0       	rjmp	.+52     	; 0x2d50 <Timer_DeInit+0xb6>
		}
	else if(id == 2){
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	82 30       	cpi	r24, 0x02	; 2
    2d20:	b9 f4       	brne	.+46     	; 0x2d50 <Timer_DeInit+0xb6>
		TCCR2 = 0;
    2d22:	e5 e4       	ldi	r30, 0x45	; 69
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	10 82       	st	Z, r1
		TCNT2 = 0;
    2d28:	e4 e4       	ldi	r30, 0x44	; 68
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	10 82       	st	Z, r1
		OCR2 = 0;
    2d2e:	e3 e4       	ldi	r30, 0x43	; 67
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE2);         /*disable Timer2 Overflow Interrupt*/
    2d34:	a9 e5       	ldi	r26, 0x59	; 89
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e9 e5       	ldi	r30, 0x59	; 89
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	8f 7b       	andi	r24, 0xBF	; 191
    2d40:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE2);         /*disable Timer2 Compare Interrupt*/
    2d42:	a9 e5       	ldi	r26, 0x59	; 89
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e9 e5       	ldi	r30, 0x59	; 89
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8f 77       	andi	r24, 0x7F	; 127
    2d4e:	8c 93       	st	X, r24
	}
}
    2d50:	0f 90       	pop	r0
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_ptr)
{
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <UART_init+0x6>
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <UART_init+0x8>
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	9c 83       	std	Y+4, r25	; 0x04
    2d66:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2d68:	1a 82       	std	Y+2, r1	; 0x02
    2d6a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2d6c:	eb e2       	ldi	r30, 0x2B	; 43
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	82 e0       	ldi	r24, 0x02	; 2
    2d72:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    2d74:	aa e2       	ldi	r26, 0x2A	; 42
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	ea e2       	ldi	r30, 0x2A	; 42
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	88 61       	ori	r24, 0x18	; 24
    2d80:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0b11111011) | (((Config_ptr->data) & 0b00000100));
    2d82:	aa e2       	ldi	r26, 0x2A	; 42
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	ea e2       	ldi	r30, 0x2A	; 42
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	98 2f       	mov	r25, r24
    2d8e:	9b 7f       	andi	r25, 0xFB	; 251
    2d90:	eb 81       	ldd	r30, Y+3	; 0x03
    2d92:	fc 81       	ldd	r31, Y+4	; 0x04
    2d94:	80 81       	ld	r24, Z
    2d96:	84 70       	andi	r24, 0x04	; 4
    2d98:	89 2b       	or	r24, r25
    2d9a:	8c 93       	st	X, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL);
    2d9c:	a0 e4       	ldi	r26, 0x40	; 64
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e0 e4       	ldi	r30, 0x40	; 64
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	80 68       	ori	r24, 0x80	; 128
    2da8:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0b11111001) | (((Config_ptr->data) & 0b00000011)<<1);
    2daa:	a0 e4       	ldi	r26, 0x40	; 64
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e0 e4       	ldi	r30, 0x40	; 64
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	28 2f       	mov	r18, r24
    2db6:	29 7f       	andi	r18, 0xF9	; 249
    2db8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dba:	fc 81       	ldd	r31, Y+4	; 0x04
    2dbc:	80 81       	ld	r24, Z
    2dbe:	88 2f       	mov	r24, r24
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	83 70       	andi	r24, 0x03	; 3
    2dc4:	90 70       	andi	r25, 0x00	; 0
    2dc6:	88 0f       	add	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	82 2b       	or	r24, r18
    2dcc:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0b11110111) | (((Config_ptr->stop_bit) & 0b00001000)<<3);
    2dce:	a0 e4       	ldi	r26, 0x40	; 64
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	e0 e4       	ldi	r30, 0x40	; 64
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	28 2f       	mov	r18, r24
    2dda:	27 7f       	andi	r18, 0xF7	; 247
    2ddc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dde:	fc 81       	ldd	r31, Y+4	; 0x04
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	88 2f       	mov	r24, r24
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	88 70       	andi	r24, 0x08	; 8
    2de8:	90 70       	andi	r25, 0x00	; 0
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	88 0f       	add	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	88 0f       	add	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	82 2b       	or	r24, r18
    2df8:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0b11001111) | (((Config_ptr->parity_type) & 0b00110000)<<4);
    2dfa:	a0 e4       	ldi	r26, 0x40	; 64
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	e0 e4       	ldi	r30, 0x40	; 64
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	28 2f       	mov	r18, r24
    2e06:	2f 7c       	andi	r18, 0xCF	; 207
    2e08:	eb 81       	ldd	r30, Y+3	; 0x03
    2e0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e0c:	81 81       	ldd	r24, Z+1	; 0x01
    2e0e:	88 2f       	mov	r24, r24
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	80 73       	andi	r24, 0x30	; 48
    2e14:	90 70       	andi	r25, 0x00	; 0
    2e16:	82 95       	swap	r24
    2e18:	92 95       	swap	r25
    2e1a:	90 7f       	andi	r25, 0xF0	; 240
    2e1c:	98 27       	eor	r25, r24
    2e1e:	80 7f       	andi	r24, 0xF0	; 240
    2e20:	98 27       	eor	r25, r24
    2e22:	82 2b       	or	r24, r18
    2e24:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_ptr->baud_rate * 8UL))) - 1);
    2e26:	eb 81       	ldd	r30, Y+3	; 0x03
    2e28:	fc 81       	ldd	r31, Y+4	; 0x04
    2e2a:	83 81       	ldd	r24, Z+3	; 0x03
    2e2c:	94 81       	ldd	r25, Z+4	; 0x04
    2e2e:	a5 81       	ldd	r26, Z+5	; 0x05
    2e30:	b6 81       	ldd	r27, Z+6	; 0x06
    2e32:	88 0f       	add	r24, r24
    2e34:	99 1f       	adc	r25, r25
    2e36:	aa 1f       	adc	r26, r26
    2e38:	bb 1f       	adc	r27, r27
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	aa 1f       	adc	r26, r26
    2e40:	bb 1f       	adc	r27, r27
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	aa 1f       	adc	r26, r26
    2e48:	bb 1f       	adc	r27, r27
    2e4a:	9c 01       	movw	r18, r24
    2e4c:	ad 01       	movw	r20, r26
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	92 e1       	ldi	r25, 0x12	; 18
    2e52:	aa e7       	ldi	r26, 0x7A	; 122
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	bc 01       	movw	r22, r24
    2e58:	cd 01       	movw	r24, r26
    2e5a:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <__udivmodsi4>
    2e5e:	da 01       	movw	r26, r20
    2e60:	c9 01       	movw	r24, r18
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	9a 83       	std	Y+2, r25	; 0x02
    2e66:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2e68:	e0 e4       	ldi	r30, 0x40	; 64
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e70:	89 2f       	mov	r24, r25
    2e72:	99 27       	eor	r25, r25
    2e74:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e76:	e9 e2       	ldi	r30, 0x29	; 41
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	80 83       	st	Z, r24
}
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	0f 92       	push	r0
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e98:	eb e2       	ldi	r30, 0x2B	; 43
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	88 2f       	mov	r24, r24
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	80 72       	andi	r24, 0x20	; 32
    2ea4:	90 70       	andi	r25, 0x00	; 0
    2ea6:	00 97       	sbiw	r24, 0x00	; 0
    2ea8:	b9 f3       	breq	.-18     	; 0x2e98 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2eaa:	ec e2       	ldi	r30, 0x2C	; 44
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	80 83       	st	Z, r24

}
    2eb2:	0f 90       	pop	r0
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ec2:	eb e2       	ldi	r30, 0x2B	; 43
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	88 23       	and	r24, r24
    2eca:	dc f7       	brge	.-10     	; 0x2ec2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2ecc:	ec e2       	ldi	r30, 0x2C	; 44
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
}
    2ed2:	cf 91       	pop	r28
    2ed4:	df 91       	pop	r29
    2ed6:	08 95       	ret

00002ed8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <UART_sendString+0x6>
    2ede:	0f 92       	push	r0
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	9b 83       	std	Y+3, r25	; 0x03
    2ee6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ee8:	19 82       	std	Y+1, r1	; 0x01
    2eea:	0e c0       	rjmp	.+28     	; 0x2f08 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	28 2f       	mov	r18, r24
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	e2 0f       	add	r30, r18
    2efa:	f3 1f       	adc	r31, r19
    2efc:	80 81       	ld	r24, Z
    2efe:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <UART_sendByte>
		i++;
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	8f 5f       	subi	r24, 0xFF	; 255
    2f06:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	9b 81       	ldd	r25, Y+3	; 0x03
    2f12:	fc 01       	movw	r30, r24
    2f14:	e2 0f       	add	r30, r18
    2f16:	f3 1f       	adc	r31, r19
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 23       	and	r24, r24
    2f1c:	39 f7       	brne	.-50     	; 0x2eec <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f2a:	0f 93       	push	r16
    2f2c:	1f 93       	push	r17
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <UART_receiveString+0xa>
    2f34:	0f 92       	push	r0
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	9b 83       	std	Y+3, r25	; 0x03
    2f3c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f3e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	28 2f       	mov	r18, r24
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	8c 01       	movw	r16, r24
    2f4c:	02 0f       	add	r16, r18
    2f4e:	13 1f       	adc	r17, r19
    2f50:	0e 94 5d 17 	call	0x2eba	; 0x2eba <UART_recieveByte>
    2f54:	f8 01       	movw	r30, r16
    2f56:	80 83       	st	Z, r24
    2f58:	0f c0       	rjmp	.+30     	; 0x2f78 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	8f 5f       	subi	r24, 0xFF	; 255
    2f5e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	28 2f       	mov	r18, r24
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6a:	8c 01       	movw	r16, r24
    2f6c:	02 0f       	add	r16, r18
    2f6e:	13 1f       	adc	r17, r19
    2f70:	0e 94 5d 17 	call	0x2eba	; 0x2eba <UART_recieveByte>
    2f74:	f8 01       	movw	r30, r16
    2f76:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	9b 81       	ldd	r25, Y+3	; 0x03
    2f82:	fc 01       	movw	r30, r24
    2f84:	e2 0f       	add	r30, r18
    2f86:	f3 1f       	adc	r31, r19
    2f88:	80 81       	ld	r24, Z
    2f8a:	83 32       	cpi	r24, 0x23	; 35
    2f8c:	31 f7       	brne	.-52     	; 0x2f5a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	28 2f       	mov	r18, r24
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	8a 81       	ldd	r24, Y+2	; 0x02
    2f96:	9b 81       	ldd	r25, Y+3	; 0x03
    2f98:	fc 01       	movw	r30, r24
    2f9a:	e2 0f       	add	r30, r18
    2f9c:	f3 1f       	adc	r31, r19
    2f9e:	10 82       	st	Z, r1
}
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	08 95       	ret

00002fb0 <__udivmodsi4>:
    2fb0:	a1 e2       	ldi	r26, 0x21	; 33
    2fb2:	1a 2e       	mov	r1, r26
    2fb4:	aa 1b       	sub	r26, r26
    2fb6:	bb 1b       	sub	r27, r27
    2fb8:	fd 01       	movw	r30, r26
    2fba:	0d c0       	rjmp	.+26     	; 0x2fd6 <__udivmodsi4_ep>

00002fbc <__udivmodsi4_loop>:
    2fbc:	aa 1f       	adc	r26, r26
    2fbe:	bb 1f       	adc	r27, r27
    2fc0:	ee 1f       	adc	r30, r30
    2fc2:	ff 1f       	adc	r31, r31
    2fc4:	a2 17       	cp	r26, r18
    2fc6:	b3 07       	cpc	r27, r19
    2fc8:	e4 07       	cpc	r30, r20
    2fca:	f5 07       	cpc	r31, r21
    2fcc:	20 f0       	brcs	.+8      	; 0x2fd6 <__udivmodsi4_ep>
    2fce:	a2 1b       	sub	r26, r18
    2fd0:	b3 0b       	sbc	r27, r19
    2fd2:	e4 0b       	sbc	r30, r20
    2fd4:	f5 0b       	sbc	r31, r21

00002fd6 <__udivmodsi4_ep>:
    2fd6:	66 1f       	adc	r22, r22
    2fd8:	77 1f       	adc	r23, r23
    2fda:	88 1f       	adc	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	1a 94       	dec	r1
    2fe0:	69 f7       	brne	.-38     	; 0x2fbc <__udivmodsi4_loop>
    2fe2:	60 95       	com	r22
    2fe4:	70 95       	com	r23
    2fe6:	80 95       	com	r24
    2fe8:	90 95       	com	r25
    2fea:	9b 01       	movw	r18, r22
    2fec:	ac 01       	movw	r20, r24
    2fee:	bd 01       	movw	r22, r26
    2ff0:	cf 01       	movw	r24, r30
    2ff2:	08 95       	ret

00002ff4 <__prologue_saves__>:
    2ff4:	2f 92       	push	r2
    2ff6:	3f 92       	push	r3
    2ff8:	4f 92       	push	r4
    2ffa:	5f 92       	push	r5
    2ffc:	6f 92       	push	r6
    2ffe:	7f 92       	push	r7
    3000:	8f 92       	push	r8
    3002:	9f 92       	push	r9
    3004:	af 92       	push	r10
    3006:	bf 92       	push	r11
    3008:	cf 92       	push	r12
    300a:	df 92       	push	r13
    300c:	ef 92       	push	r14
    300e:	ff 92       	push	r15
    3010:	0f 93       	push	r16
    3012:	1f 93       	push	r17
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	ca 1b       	sub	r28, r26
    301e:	db 0b       	sbc	r29, r27
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	f8 94       	cli
    3024:	de bf       	out	0x3e, r29	; 62
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	cd bf       	out	0x3d, r28	; 61
    302a:	09 94       	ijmp

0000302c <__epilogue_restores__>:
    302c:	2a 88       	ldd	r2, Y+18	; 0x12
    302e:	39 88       	ldd	r3, Y+17	; 0x11
    3030:	48 88       	ldd	r4, Y+16	; 0x10
    3032:	5f 84       	ldd	r5, Y+15	; 0x0f
    3034:	6e 84       	ldd	r6, Y+14	; 0x0e
    3036:	7d 84       	ldd	r7, Y+13	; 0x0d
    3038:	8c 84       	ldd	r8, Y+12	; 0x0c
    303a:	9b 84       	ldd	r9, Y+11	; 0x0b
    303c:	aa 84       	ldd	r10, Y+10	; 0x0a
    303e:	b9 84       	ldd	r11, Y+9	; 0x09
    3040:	c8 84       	ldd	r12, Y+8	; 0x08
    3042:	df 80       	ldd	r13, Y+7	; 0x07
    3044:	ee 80       	ldd	r14, Y+6	; 0x06
    3046:	fd 80       	ldd	r15, Y+5	; 0x05
    3048:	0c 81       	ldd	r16, Y+4	; 0x04
    304a:	1b 81       	ldd	r17, Y+3	; 0x03
    304c:	aa 81       	ldd	r26, Y+2	; 0x02
    304e:	b9 81       	ldd	r27, Y+1	; 0x01
    3050:	ce 0f       	add	r28, r30
    3052:	d1 1d       	adc	r29, r1
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	ed 01       	movw	r28, r26
    3060:	08 95       	ret

00003062 <itoa>:
    3062:	fb 01       	movw	r30, r22
    3064:	9f 01       	movw	r18, r30
    3066:	e8 94       	clt
    3068:	42 30       	cpi	r20, 0x02	; 2
    306a:	c4 f0       	brlt	.+48     	; 0x309c <itoa+0x3a>
    306c:	45 32       	cpi	r20, 0x25	; 37
    306e:	b4 f4       	brge	.+44     	; 0x309c <itoa+0x3a>
    3070:	4a 30       	cpi	r20, 0x0A	; 10
    3072:	29 f4       	brne	.+10     	; 0x307e <itoa+0x1c>
    3074:	97 fb       	bst	r25, 7
    3076:	1e f4       	brtc	.+6      	; 0x307e <itoa+0x1c>
    3078:	90 95       	com	r25
    307a:	81 95       	neg	r24
    307c:	9f 4f       	sbci	r25, 0xFF	; 255
    307e:	64 2f       	mov	r22, r20
    3080:	77 27       	eor	r23, r23
    3082:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodhi4>
    3086:	80 5d       	subi	r24, 0xD0	; 208
    3088:	8a 33       	cpi	r24, 0x3A	; 58
    308a:	0c f0       	brlt	.+2      	; 0x308e <itoa+0x2c>
    308c:	89 5d       	subi	r24, 0xD9	; 217
    308e:	81 93       	st	Z+, r24
    3090:	cb 01       	movw	r24, r22
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	a1 f7       	brne	.-24     	; 0x307e <itoa+0x1c>
    3096:	16 f4       	brtc	.+4      	; 0x309c <itoa+0x3a>
    3098:	5d e2       	ldi	r21, 0x2D	; 45
    309a:	51 93       	st	Z+, r21
    309c:	10 82       	st	Z, r1
    309e:	c9 01       	movw	r24, r18
    30a0:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <strrev>

000030a4 <strrev>:
    30a4:	dc 01       	movw	r26, r24
    30a6:	fc 01       	movw	r30, r24
    30a8:	67 2f       	mov	r22, r23
    30aa:	71 91       	ld	r23, Z+
    30ac:	77 23       	and	r23, r23
    30ae:	e1 f7       	brne	.-8      	; 0x30a8 <strrev+0x4>
    30b0:	32 97       	sbiw	r30, 0x02	; 2
    30b2:	04 c0       	rjmp	.+8      	; 0x30bc <strrev+0x18>
    30b4:	7c 91       	ld	r23, X
    30b6:	6d 93       	st	X+, r22
    30b8:	70 83       	st	Z, r23
    30ba:	62 91       	ld	r22, -Z
    30bc:	ae 17       	cp	r26, r30
    30be:	bf 07       	cpc	r27, r31
    30c0:	c8 f3       	brcs	.-14     	; 0x30b4 <strrev+0x10>
    30c2:	08 95       	ret

000030c4 <__udivmodhi4>:
    30c4:	aa 1b       	sub	r26, r26
    30c6:	bb 1b       	sub	r27, r27
    30c8:	51 e1       	ldi	r21, 0x11	; 17
    30ca:	07 c0       	rjmp	.+14     	; 0x30da <__udivmodhi4_ep>

000030cc <__udivmodhi4_loop>:
    30cc:	aa 1f       	adc	r26, r26
    30ce:	bb 1f       	adc	r27, r27
    30d0:	a6 17       	cp	r26, r22
    30d2:	b7 07       	cpc	r27, r23
    30d4:	10 f0       	brcs	.+4      	; 0x30da <__udivmodhi4_ep>
    30d6:	a6 1b       	sub	r26, r22
    30d8:	b7 0b       	sbc	r27, r23

000030da <__udivmodhi4_ep>:
    30da:	88 1f       	adc	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	5a 95       	dec	r21
    30e0:	a9 f7       	brne	.-22     	; 0x30cc <__udivmodhi4_loop>
    30e2:	80 95       	com	r24
    30e4:	90 95       	com	r25
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	08 95       	ret

000030ec <_exit>:
    30ec:	f8 94       	cli

000030ee <__stop_program>:
    30ee:	ff cf       	rjmp	.-2      	; 0x30ee <__stop_program>
